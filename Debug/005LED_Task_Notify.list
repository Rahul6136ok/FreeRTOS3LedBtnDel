
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a8  080072a8  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  080072a8  080072a8  000082a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072b0  080072b0  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b0  080072b0  000082b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072b4  080072b4  000082b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080072b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009014  2**0
                  CONTENTS
 10 .bss          00014498  20000014  20000014  00009014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144ac  200144ac  00009014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014966  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f76  00000000  00000000  0001d9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00020920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0c  00000000  00000000  00021cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f0e  00000000  00000000  00022bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016162  00000000  00000000  00043aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d97b2  00000000  00000000  00059c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001333de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005218  00000000  00000000  00133424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b0  00000000  00000000  0013863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070a8 	.word	0x080070a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080070a8 	.word	0x080070a8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e78 	.word	0x20012e78

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0208 	add.w	r2, r3, #8
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f04f 32ff 	mov.w	r2, #4294967295
 800056c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f103 0208 	add.w	r2, r3, #8
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0208 	add.w	r2, r3, #8
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	689a      	ldr	r2, [r3, #8]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d103      	bne.n	8000616 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e00c      	b.n	8000630 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3308      	adds	r3, #8
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e002      	b.n	8000624 <vListInsert+0x2e>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	429a      	cmp	r2, r3
 800062e:	d2f6      	bcs.n	800061e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	691b      	ldr	r3, [r3, #16]
 8000674:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	6892      	ldr	r2, [r2, #8]
 800067e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	6852      	ldr	r2, [r2, #4]
 8000688:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	d103      	bne.n	800069c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d10b      	bne.n	80006ec <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d8:	f383 8811 	msr	BASEPRI, r3
 80006dc:	f3bf 8f6f 	isb	sy
 80006e0:	f3bf 8f4f 	dsb	sy
 80006e4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d05d      	beq.n	80007ae <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d059      	beq.n	80007ae <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000702:	2100      	movs	r1, #0
 8000704:	fba3 2302 	umull	r2, r3, r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	d000      	beq.n	800070e <xQueueGenericReset+0x52>
 800070c:	2101      	movs	r1, #1
 800070e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14c      	bne.n	80007ae <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000714:	f002 f9ba 	bl	8002a8c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000720:	6939      	ldr	r1, [r7, #16]
 8000722:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	441a      	add	r2, r3
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	2200      	movs	r2, #0
 8000732:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000744:	3b01      	subs	r3, #1
 8000746:	6939      	ldr	r1, [r7, #16]
 8000748:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800074a:	fb01 f303 	mul.w	r3, r1, r3
 800074e:	441a      	add	r2, r3
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	22ff      	movs	r2, #255	@ 0xff
 8000758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	22ff      	movs	r2, #255	@ 0xff
 8000760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d114      	bne.n	8000794 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d01a      	beq.n	80007a8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	3310      	adds	r3, #16
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f8d4 	bl	8001924 <xTaskRemoveFromEventList>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d012      	beq.n	80007a8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <xQueueGenericReset+0x120>)
 8000784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	f3bf 8f4f 	dsb	sy
 800078e:	f3bf 8f6f 	isb	sy
 8000792:	e009      	b.n	80007a8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	3310      	adds	r3, #16
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fedb 	bl	8000554 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	3324      	adds	r3, #36	@ 0x24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fed6 	bl	8000554 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80007a8:	f002 f9a2 	bl	8002af0 <vPortExitCritical>
 80007ac:	e001      	b.n	80007b2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10b      	bne.n	80007d0 <xQueueGenericReset+0x114>
        __asm volatile
 80007b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007bc:	f383 8811 	msr	BASEPRI, r3
 80007c0:	f3bf 8f6f 	isb	sy
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	60bb      	str	r3, [r7, #8]
    }
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80007d0:	697b      	ldr	r3, [r7, #20]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000ed04 	.word	0xe000ed04

080007e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d02e      	beq.n	8000856 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007f8:	2100      	movs	r1, #0
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	fba3 2302 	umull	r2, r3, r3, r2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d000      	beq.n	8000808 <xQueueGenericCreate+0x28>
 8000806:	2101      	movs	r1, #1
 8000808:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800080a:	2b00      	cmp	r3, #0
 800080c:	d123      	bne.n	8000856 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	68ba      	ldr	r2, [r7, #8]
 8000812:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000816:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800081a:	d81c      	bhi.n	8000856 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	fb02 f303 	mul.w	r3, r2, r3
 8000824:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	3350      	adds	r3, #80	@ 0x50
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fa60 	bl	8002cf0 <pvPortMalloc>
 8000830:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01d      	beq.n	8000874 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	3350      	adds	r3, #80	@ 0x50
 8000840:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	4613      	mov	r3, r2
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f815 	bl	800087e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000854:	e00e      	b.n	8000874 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10b      	bne.n	8000874 <xQueueGenericCreate+0x94>
        __asm volatile
 800085c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000860:	f383 8811 	msr	BASEPRI, r3
 8000864:	f3bf 8f6f 	isb	sy
 8000868:	f3bf 8f4f 	dsb	sy
 800086c:	613b      	str	r3, [r7, #16]
    }
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000874:	69fb      	ldr	r3, [r7, #28]
    }
 8000876:	4618      	mov	r0, r3
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e002      	b.n	80008a0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80008ac:	2101      	movs	r1, #1
 80008ae:	69b8      	ldr	r0, [r7, #24]
 80008b0:	f7ff ff04 	bl	80006bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	78fa      	ldrb	r2, [r7, #3]
 80008b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	68f9      	ldr	r1, [r7, #12]
 80008c2:	2073      	movs	r0, #115	@ 0x73
 80008c4:	f003 fe54 	bl	8004570 <SEGGER_SYSVIEW_RecordU32x3>
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08f      	sub	sp, #60	@ 0x3c
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80008e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10b      	bne.n	8000902 <xQueueReceive+0x32>
        __asm volatile
 80008ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ee:	f383 8811 	msr	BASEPRI, r3
 80008f2:	f3bf 8f6f 	isb	sy
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	623b      	str	r3, [r7, #32]
    }
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	e7fd      	b.n	80008fe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <xQueueReceive+0x40>
 8000908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <xQueueReceive+0x44>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <xQueueReceive+0x46>
 8000914:	2300      	movs	r3, #0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10b      	bne.n	8000932 <xQueueReceive+0x62>
        __asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	61fb      	str	r3, [r7, #28]
    }
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000932:	f001 fa0d 	bl	8001d50 <xTaskGetSchedulerState>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <xQueueReceive+0x72>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <xQueueReceive+0x76>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <xQueueReceive+0x78>
 8000946:	2300      	movs	r3, #0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10b      	bne.n	8000964 <xQueueReceive+0x94>
        __asm volatile
 800094c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000950:	f383 8811 	msr	BASEPRI, r3
 8000954:	f3bf 8f6f 	isb	sy
 8000958:	f3bf 8f4f 	dsb	sy
 800095c:	61bb      	str	r3, [r7, #24]
    }
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000964:	f002 f892 	bl	8002a8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800096a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	2b00      	cmp	r3, #0
 8000972:	d02f      	beq.n	80009d4 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000978:	f000 f8be 	bl	8000af8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800097c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fb22 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 8000984:	4604      	mov	r4, r0
 8000986:	2000      	movs	r0, #0
 8000988:	f004 fb1e 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 800098c:	4602      	mov	r2, r0
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2101      	movs	r1, #1
 8000992:	9100      	str	r1, [sp, #0]
 8000994:	4621      	mov	r1, r4
 8000996:	205c      	movs	r0, #92	@ 0x5c
 8000998:	f003 fe60 	bl	800465c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00f      	beq.n	80009cc <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ae:	3310      	adds	r3, #16
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 ffb7 	bl	8001924 <xTaskRemoveFromEventList>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d007      	beq.n	80009cc <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80009bc:	4b4d      	ldr	r3, [pc, #308]	@ (8000af4 <xQueueReceive+0x224>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80009cc:	f002 f890 	bl	8002af0 <vPortExitCritical>
                return pdPASS;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e08a      	b.n	8000aea <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d113      	bne.n	8000a02 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009da:	f002 f889 	bl	8002af0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80009de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 faf1 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 80009e6:	4604      	mov	r4, r0
 80009e8:	2000      	movs	r0, #0
 80009ea:	f004 faed 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 80009ee:	4602      	mov	r2, r0
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2101      	movs	r1, #1
 80009f4:	9100      	str	r1, [sp, #0]
 80009f6:	4621      	mov	r1, r4
 80009f8:	205c      	movs	r0, #92	@ 0x5c
 80009fa:	f003 fe2f 	bl	800465c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e073      	b.n	8000aea <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d106      	bne.n	8000a16 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f863 	bl	8001ad8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a16:	f002 f86b 	bl	8002af0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a1a:	f000 fc5d 	bl	80012d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a1e:	f002 f835 	bl	8002a8c <vPortEnterCritical>
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2e:	d103      	bne.n	8000a38 <xQueueReceive+0x168>
 8000a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d103      	bne.n	8000a4e <xQueueReceive+0x17e>
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a4e:	f002 f84f 	bl	8002af0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a52:	1d3a      	adds	r2, r7, #4
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f852 	bl	8001b04 <xTaskCheckForTimeOut>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d124      	bne.n	8000ab0 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a68:	f000 f8be 	bl	8000be8 <prvIsQueueEmpty>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d018      	beq.n	8000aa4 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a74:	3324      	adds	r3, #36	@ 0x24
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fee2 	bl	8001844 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a82:	f000 f85f 	bl	8000b44 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a86:	f000 fc35 	bl	80012f4 <xTaskResumeAll>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f47f af69 	bne.w	8000964 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <xQueueReceive+0x224>)
 8000a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	f3bf 8f4f 	dsb	sy
 8000a9e:	f3bf 8f6f 	isb	sy
 8000aa2:	e75f      	b.n	8000964 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000aa6:	f000 f84d 	bl	8000b44 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aaa:	f000 fc23 	bl	80012f4 <xTaskResumeAll>
 8000aae:	e759      	b.n	8000964 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ab2:	f000 f847 	bl	8000b44 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ab6:	f000 fc1d 	bl	80012f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000abc:	f000 f894 	bl	8000be8 <prvIsQueueEmpty>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f43f af4e 	beq.w	8000964 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 fa7c 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f004 fa78 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2101      	movs	r1, #1
 8000ade:	9100      	str	r1, [sp, #0]
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	205c      	movs	r0, #92	@ 0x5c
 8000ae4:	f003 fdba 	bl	800465c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000ae8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3734      	adds	r7, #52	@ 0x34
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d018      	beq.n	8000b3c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	441a      	add	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d303      	bcc.n	8000b2c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68d9      	ldr	r1, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	461a      	mov	r2, r3
 8000b36:	6838      	ldr	r0, [r7, #0]
 8000b38:	f006 faa8 	bl	800708c <memcpy>
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b4c:	f001 ff9e 	bl	8002a8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b56:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b58:	e011      	b.n	8000b7e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d012      	beq.n	8000b88 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3324      	adds	r3, #36	@ 0x24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fedc 	bl	8001924 <xTaskRemoveFromEventList>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b72:	f001 f82f 	bl	8001bd4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dce9      	bgt.n	8000b5a <prvUnlockQueue+0x16>
 8000b86:	e000      	b.n	8000b8a <prvUnlockQueue+0x46>
                    break;
 8000b88:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	22ff      	movs	r2, #255	@ 0xff
 8000b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000b92:	f001 ffad 	bl	8002af0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b96:	f001 ff79 	bl	8002a8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000ba0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ba2:	e011      	b.n	8000bc8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d012      	beq.n	8000bd2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3310      	adds	r3, #16
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 feb7 	bl	8001924 <xTaskRemoveFromEventList>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bbc:	f001 f80a 	bl	8001bd4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dce9      	bgt.n	8000ba4 <prvUnlockQueue+0x60>
 8000bd0:	e000      	b.n	8000bd4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bd2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	22ff      	movs	r2, #255	@ 0xff
 8000bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000bdc:	f001 ff88 	bl	8002af0 <vPortExitCritical>
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000bf0:	f001 ff4c 	bl	8002a8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e001      	b.n	8000c06 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c06:	f001 ff73 	bl	8002af0 <vPortExitCritical>

    return xReturn;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10b      	bne.n	8000c40 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	60fb      	str	r3, [r7, #12]
    }
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d024      	beq.n	8000c90 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e01e      	b.n	8000c8a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <vQueueAddToRegistry+0xac>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d105      	bne.n	8000c68 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <vQueueAddToRegistry+0xac>)
 8000c62:	4413      	add	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
                    break;
 8000c66:	e013      	b.n	8000c90 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10a      	bne.n	8000c84 <vQueueAddToRegistry+0x70>
 8000c6e:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <vQueueAddToRegistry+0xac>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d104      	bne.n	8000c84 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <vQueueAddToRegistry+0xac>)
 8000c80:	4413      	add	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d9dd      	bls.n	8000c4c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00f      	beq.n	8000cb6 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 f98f 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 8000caa:	4601      	mov	r1, r0
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2071      	movs	r0, #113	@ 0x71
 8000cb2:	f003 fc03 	bl	80044bc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000030 	.word	0x20000030

08000cc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000cd4:	f001 feda 	bl	8002a8c <vPortEnterCritical>
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d103      	bne.n	8000cee <vQueueWaitForMessageRestricted+0x2a>
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfa:	d103      	bne.n	8000d04 <vQueueWaitForMessageRestricted+0x40>
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000d04:	f001 fef4 	bl	8002af0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d106      	bne.n	8000d1e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3324      	adds	r3, #36	@ 0x24
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fdb9 	bl	8001890 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff10 	bl	8000b44 <prvUnlockQueue>
    }
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	@ 0x30
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 ffd5 	bl	8002cf0 <pvPortMalloc>
 8000d46:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d013      	beq.n	8000d76 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d4e:	2058      	movs	r0, #88	@ 0x58
 8000d50:	f001 ffce 	bl	8002cf0 <pvPortMalloc>
 8000d54:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d008      	beq.n	8000d6e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d5c:	2258      	movs	r2, #88	@ 0x58
 8000d5e:	2100      	movs	r1, #0
 8000d60:	69f8      	ldr	r0, [r7, #28]
 8000d62:	f006 f967 	bl	8007034 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d6c:	e005      	b.n	8000d7a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f002 f87a 	bl	8002e68 <vPortFree>
 8000d74:	e001      	b.n	8000d7a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d013      	beq.n	8000da8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d80:	88fa      	ldrh	r2, [r7, #6]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f80e 	bl	8000db8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d9c:	69f8      	ldr	r0, [r7, #28]
 8000d9e:	f000 f89b 	bl	8000ed8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	e002      	b.n	8000dae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000dae:	69bb      	ldr	r3, [r7, #24]
    }
 8000db0:	4618      	mov	r0, r3
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dc8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	21a5      	movs	r1, #165	@ 0xa5
 8000dd2:	f006 f92f 	bl	8007034 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000de0:	3b01      	subs	r3, #1
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f023 0307 	bic.w	r3, r3, #7
 8000dee:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00b      	beq.n	8000e12 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8000dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dfe:	f383 8811 	msr	BASEPRI, r3
 8000e02:	f3bf 8f6f 	isb	sy
 8000e06:	f3bf 8f4f 	dsb	sy
 8000e0a:	617b      	str	r3, [r7, #20]
    }
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	e7fd      	b.n	8000e0e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d01e      	beq.n	8000e56 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	e012      	b.n	8000e44 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	4413      	add	r3, r2
 8000e24:	7819      	ldrb	r1, [r3, #0]
 8000e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3334      	adds	r3, #52	@ 0x34
 8000e2e:	460a      	mov	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	2b09      	cmp	r3, #9
 8000e48:	d9e9      	bls.n	8000e1e <prvInitialiseNewTask+0x66>
 8000e4a:	e000      	b.n	8000e4e <prvInitialiseNewTask+0x96>
            {
                break;
 8000e4c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d90b      	bls.n	8000e74 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8000e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e60:	f383 8811 	msr	BASEPRI, r3
 8000e64:	f3bf 8f6f 	isb	sy
 8000e68:	f3bf 8f4f 	dsb	sy
 8000e6c:	613b      	str	r3, [r7, #16]
    }
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d901      	bls.n	8000e7e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e88:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb80 	bl	8000594 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e96:	3318      	adds	r3, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb7b 	bl	8000594 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ea2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea6:	f1c3 0205 	rsb	r2, r3, #5
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	68f9      	ldr	r1, [r7, #12]
 8000eb8:	69b8      	ldr	r0, [r7, #24]
 8000eba:	f001 fc35 	bl	8002728 <pxPortInitialiseStack>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ec2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ece:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ee0:	f001 fdd4 	bl	8002a8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8001024 <prvAddNewTaskToReadyList+0x14c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a4e      	ldr	r2, [pc, #312]	@ (8001024 <prvAddNewTaskToReadyList+0x14c>)
 8000eec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000eee:	4b4e      	ldr	r3, [pc, #312]	@ (8001028 <prvAddNewTaskToReadyList+0x150>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8001028 <prvAddNewTaskToReadyList+0x150>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000efc:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <prvAddNewTaskToReadyList+0x14c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d110      	bne.n	8000f26 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000f04:	f000 fe8a 	bl	8001c1c <prvInitialiseTaskLists>
 8000f08:	e00d      	b.n	8000f26 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000f0a:	4b48      	ldr	r3, [pc, #288]	@ (800102c <prvAddNewTaskToReadyList+0x154>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f12:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <prvAddNewTaskToReadyList+0x150>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d802      	bhi.n	8000f26 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f20:	4a41      	ldr	r2, [pc, #260]	@ (8001028 <prvAddNewTaskToReadyList+0x150>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <prvAddNewTaskToReadyList+0x158>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a40      	ldr	r2, [pc, #256]	@ (8001030 <prvAddNewTaskToReadyList+0x158>)
 8000f2e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f30:	4b3f      	ldr	r3, [pc, #252]	@ (8001030 <prvAddNewTaskToReadyList+0x158>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d016      	beq.n	8000f6c <prvAddNewTaskToReadyList+0x94>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 ff7b 	bl	8004e3c <SEGGER_SYSVIEW_OnTaskCreate>
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	461d      	mov	r5, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	461c      	mov	r4, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	1ae3      	subs	r3, r4, r3
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	462b      	mov	r3, r5
 8000f68:	f002 f942 	bl	80031f0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 ffe8 	bl	8004f44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f78:	2201      	movs	r2, #1
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <prvAddNewTaskToReadyList+0x15c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	4a2c      	ldr	r2, [pc, #176]	@ (8001034 <prvAddNewTaskToReadyList+0x15c>)
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f8a:	492b      	ldr	r1, [pc, #172]	@ (8001038 <prvAddNewTaskToReadyList+0x160>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	3204      	adds	r2, #4
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001038 <prvAddNewTaskToReadyList+0x160>)
 8000fca:	441a      	add	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fd4:	4918      	ldr	r1, [pc, #96]	@ (8001038 <prvAddNewTaskToReadyList+0x160>)
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	1c59      	adds	r1, r3, #1
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <prvAddNewTaskToReadyList+0x160>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4403      	add	r3, r0
 8000ff0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ff2:	f001 fd7d 	bl	8002af0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <prvAddNewTaskToReadyList+0x154>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00e      	beq.n	800101c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <prvAddNewTaskToReadyList+0x150>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <prvAddNewTaskToReadyList+0x164>)
 800100e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bdb0      	pop	{r4, r5, r7, pc}
 8001024:	20000148 	.word	0x20000148
 8001028:	20000070 	.word	0x20000070
 800102c:	20000154 	.word	0x20000154
 8001030:	20000164 	.word	0x20000164
 8001034:	20000150 	.word	0x20000150
 8001038:	20000074 	.word	0x20000074
 800103c:	e000ed04 	.word	0xe000ed04

08001040 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001048:	f001 fd20 	bl	8002a8c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <vTaskDelete+0x18>
 8001052:	4b49      	ldr	r3, [pc, #292]	@ (8001178 <vTaskDelete+0x138>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e000      	b.n	800105a <vTaskDelete+0x1a>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3304      	adds	r3, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fb01 	bl	8000668 <uxListRemove>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d115      	bne.n	8001098 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001070:	4942      	ldr	r1, [pc, #264]	@ (800117c <vTaskDelete+0x13c>)
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10a      	bne.n	8001098 <vTaskDelete+0x58>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001086:	2201      	movs	r2, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43da      	mvns	r2, r3
 800108e:	4b3c      	ldr	r3, [pc, #240]	@ (8001180 <vTaskDelete+0x140>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4013      	ands	r3, r2
 8001094:	4a3a      	ldr	r2, [pc, #232]	@ (8001180 <vTaskDelete+0x140>)
 8001096:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3318      	adds	r3, #24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fadf 	bl	8000668 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80010aa:	4b36      	ldr	r3, [pc, #216]	@ (8001184 <vTaskDelete+0x144>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <vTaskDelete+0x144>)
 80010b2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80010b4:	4b30      	ldr	r3, [pc, #192]	@ (8001178 <vTaskDelete+0x138>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d118      	bne.n	80010f0 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3304      	adds	r3, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4830      	ldr	r0, [pc, #192]	@ (8001188 <vTaskDelete+0x148>)
 80010c6:	f7ff fa72 	bl	80005ae <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80010ca:	4b30      	ldr	r3, [pc, #192]	@ (800118c <vTaskDelete+0x14c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a2e      	ldr	r2, [pc, #184]	@ (800118c <vTaskDelete+0x14c>)
 80010d2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 ff76 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	2022      	movs	r0, #34	@ 0x22
 80010e2:	f003 f9af 	bl	8004444 <SEGGER_SYSVIEW_RecordU32>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 f8e9 	bl	80032c0 <SYSVIEW_DeleteTask>
 80010ee:	e013      	b.n	8001118 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <vTaskDelete+0x150>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a26      	ldr	r2, [pc, #152]	@ (8001190 <vTaskDelete+0x150>)
 80010f8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 ff63 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 8001102:	4603      	mov	r3, r0
 8001104:	4619      	mov	r1, r3
 8001106:	2022      	movs	r0, #34	@ 0x22
 8001108:	f003 f99c 	bl	8004444 <SEGGER_SYSVIEW_RecordU32>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f8d6 	bl	80032c0 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8001114:	f000 fe00 	bl	8001d18 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8001118:	f001 fcea 	bl	8002af0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800111c:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <vTaskDelete+0x138>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	429a      	cmp	r2, r3
 8001124:	d002      	beq.n	800112c <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 fde6 	bl	8001cf8 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <vTaskDelete+0x154>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01c      	beq.n	800116e <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8001134:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <vTaskDelete+0x138>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	d117      	bne.n	800116e <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <vTaskDelete+0x158>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00b      	beq.n	800115e <vTaskDelete+0x11e>
        __asm volatile
 8001146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800114a:	f383 8811 	msr	BASEPRI, r3
 800114e:	f3bf 8f6f 	isb	sy
 8001152:	f3bf 8f4f 	dsb	sy
 8001156:	60bb      	str	r3, [r7, #8]
    }
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	e7fd      	b.n	800115a <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <vTaskDelete+0x15c>)
 8001160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	f3bf 8f4f 	dsb	sy
 800116a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000070 	.word	0x20000070
 800117c:	20000074 	.word	0x20000074
 8001180:	20000150 	.word	0x20000150
 8001184:	20000164 	.word	0x20000164
 8001188:	2000011c 	.word	0x2000011c
 800118c:	20000130 	.word	0x20000130
 8001190:	20000148 	.word	0x20000148
 8001194:	20000154 	.word	0x20000154
 8001198:	20000170 	.word	0x20000170
 800119c:	e000ed04 	.word	0xe000ed04

080011a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01c      	beq.n	80011ec <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <vTaskDelay+0x6c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <vTaskDelay+0x32>
        __asm volatile
 80011ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011be:	f383 8811 	msr	BASEPRI, r3
 80011c2:	f3bf 8f6f 	isb	sy
 80011c6:	f3bf 8f4f 	dsb	sy
 80011ca:	60bb      	str	r3, [r7, #8]
    }
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	e7fd      	b.n	80011ce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80011d2:	f000 f881 	bl	80012d8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2023      	movs	r0, #35	@ 0x23
 80011da:	f003 f933 	bl	8004444 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80011de:	2100      	movs	r1, #0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 ff95 	bl	8002110 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80011e6:	f000 f885 	bl	80012f4 <xTaskResumeAll>
 80011ea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 80011f2:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <vTaskDelay+0x70>)
 80011f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000170 	.word	0x20000170
 8001210:	e000ed04 	.word	0xe000ed04

08001214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <vTaskStartScheduler+0xa4>)
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2300      	movs	r3, #0
 8001224:	2282      	movs	r2, #130	@ 0x82
 8001226:	4925      	ldr	r1, [pc, #148]	@ (80012bc <vTaskStartScheduler+0xa8>)
 8001228:	4825      	ldr	r0, [pc, #148]	@ (80012c0 <vTaskStartScheduler+0xac>)
 800122a:	f7ff fd7f 	bl	8000d2c <xTaskCreate>
 800122e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8001236:	f000 ffeb 	bl	8002210 <xTimerCreateTimerTask>
 800123a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d124      	bne.n	800128c <vTaskStartScheduler+0x78>
        __asm volatile
 8001242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001246:	f383 8811 	msr	BASEPRI, r3
 800124a:	f3bf 8f6f 	isb	sy
 800124e:	f3bf 8f4f 	dsb	sy
 8001252:	60bb      	str	r3, [r7, #8]
    }
 8001254:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <vTaskStartScheduler+0xb0>)
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <vTaskStartScheduler+0xb4>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <vTaskStartScheduler+0xb8>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <vTaskStartScheduler+0xbc>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <vTaskStartScheduler+0xa4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d102      	bne.n	800127c <vTaskStartScheduler+0x68>
 8001276:	f003 fdc5 	bl	8004e04 <SEGGER_SYSVIEW_OnIdle>
 800127a:	e004      	b.n	8001286 <vTaskStartScheduler+0x72>
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <vTaskStartScheduler+0xbc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fe1d 	bl	8004ec0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001286:	f001 fadd 	bl	8002844 <xPortStartScheduler>
 800128a:	e00f      	b.n	80012ac <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d10b      	bne.n	80012ac <vTaskStartScheduler+0x98>
        __asm volatile
 8001294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001298:	f383 8811 	msr	BASEPRI, r3
 800129c:	f3bf 8f6f 	isb	sy
 80012a0:	f3bf 8f4f 	dsb	sy
 80012a4:	607b      	str	r3, [r7, #4]
    }
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <vTaskStartScheduler+0xc0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000016c 	.word	0x2000016c
 80012bc:	080070c0 	.word	0x080070c0
 80012c0:	08001bed 	.word	0x08001bed
 80012c4:	20000168 	.word	0x20000168
 80012c8:	20000154 	.word	0x20000154
 80012cc:	2000014c 	.word	0x2000014c
 80012d0:	20000070 	.word	0x20000070
 80012d4:	20000000 	.word	0x20000000

080012d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <vTaskSuspendAll+0x18>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a03      	ldr	r2, [pc, #12]	@ (80012f0 <vTaskSuspendAll+0x18>)
 80012e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000170 	.word	0x20000170

080012f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001302:	4b73      	ldr	r3, [pc, #460]	@ (80014d0 <xTaskResumeAll+0x1dc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10b      	bne.n	8001322 <xTaskResumeAll+0x2e>
        __asm volatile
 800130a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800130e:	f383 8811 	msr	BASEPRI, r3
 8001312:	f3bf 8f6f 	isb	sy
 8001316:	f3bf 8f4f 	dsb	sy
 800131a:	607b      	str	r3, [r7, #4]
    }
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	e7fd      	b.n	800131e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001322:	f001 fbb3 	bl	8002a8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001326:	4b6a      	ldr	r3, [pc, #424]	@ (80014d0 <xTaskResumeAll+0x1dc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a68      	ldr	r2, [pc, #416]	@ (80014d0 <xTaskResumeAll+0x1dc>)
 800132e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001330:	4b67      	ldr	r3, [pc, #412]	@ (80014d0 <xTaskResumeAll+0x1dc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 80c4 	bne.w	80014c2 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800133a:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <xTaskResumeAll+0x1e0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80bf 	beq.w	80014c2 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001344:	e08e      	b.n	8001464 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001346:	4b64      	ldr	r3, [pc, #400]	@ (80014d8 <xTaskResumeAll+0x1e4>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	6a12      	ldr	r2, [r2, #32]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	69d2      	ldr	r2, [r2, #28]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3318      	adds	r3, #24
 8001370:	429a      	cmp	r2, r3
 8001372:	d103      	bne.n	800137c <xTaskResumeAll+0x88>
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	68d2      	ldr	r2, [r2, #12]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	6892      	ldr	r2, [r2, #8]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d103      	bne.n	80013ba <xTaskResumeAll+0xc6>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fdb9 	bl	8004f44 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d6:	2201      	movs	r2, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <xTaskResumeAll+0x1e8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	4a3e      	ldr	r2, [pc, #248]	@ (80014dc <xTaskResumeAll+0x1e8>)
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013e8:	493d      	ldr	r1, [pc, #244]	@ (80014e0 <xTaskResumeAll+0x1ec>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3304      	adds	r3, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	3204      	adds	r2, #4
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	1d1a      	adds	r2, r3, #4
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4a2e      	ldr	r2, [pc, #184]	@ (80014e0 <xTaskResumeAll+0x1ec>)
 8001428:	441a      	add	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001432:	492b      	ldr	r1, [pc, #172]	@ (80014e0 <xTaskResumeAll+0x1ec>)
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	4827      	ldr	r0, [pc, #156]	@ (80014e0 <xTaskResumeAll+0x1ec>)
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4403      	add	r3, r0
 800144e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001454:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <xTaskResumeAll+0x1f0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <xTaskResumeAll+0x1f4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <xTaskResumeAll+0x1e4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f47f af6c 	bne.w	8001346 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001474:	f000 fc50 	bl	8001d18 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001478:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <xTaskResumeAll+0x1f8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d010      	beq.n	80014a6 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001484:	f000 f858 	bl	8001538 <xTaskIncrementTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800148e:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <xTaskResumeAll+0x1f4>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3b01      	subs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f1      	bne.n	8001484 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <xTaskResumeAll+0x1f8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <xTaskResumeAll+0x1f4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <xTaskResumeAll+0x1fc>)
 80014b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f3bf 8f4f 	dsb	sy
 80014be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80014c2:	f001 fb15 	bl	8002af0 <vPortExitCritical>

    return xAlreadyYielded;
 80014c6:	69bb      	ldr	r3, [r7, #24]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000170 	.word	0x20000170
 80014d4:	20000148 	.word	0x20000148
 80014d8:	20000108 	.word	0x20000108
 80014dc:	20000150 	.word	0x20000150
 80014e0:	20000074 	.word	0x20000074
 80014e4:	20000070 	.word	0x20000070
 80014e8:	2000015c 	.word	0x2000015c
 80014ec:	20000158 	.word	0x20000158
 80014f0:	e000ed04 	.word	0xe000ed04

080014f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <xTaskGetTickCount+0x1c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2000014c 	.word	0x2000014c

08001514 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800151a:	f001 fba7 	bl	8002c6c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <xTaskGetTickCountFromISR+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001528:	683b      	ldr	r3, [r7, #0]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000014c 	.word	0x2000014c

08001538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001542:	4b80      	ldr	r3, [pc, #512]	@ (8001744 <xTaskIncrementTick+0x20c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 80f1 	bne.w	800172e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800154c:	4b7e      	ldr	r3, [pc, #504]	@ (8001748 <xTaskIncrementTick+0x210>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001554:	4a7c      	ldr	r2, [pc, #496]	@ (8001748 <xTaskIncrementTick+0x210>)
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d121      	bne.n	80015a4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001560:	4b7a      	ldr	r3, [pc, #488]	@ (800174c <xTaskIncrementTick+0x214>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <xTaskIncrementTick+0x4a>
        __asm volatile
 800156a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800156e:	f383 8811 	msr	BASEPRI, r3
 8001572:	f3bf 8f6f 	isb	sy
 8001576:	f3bf 8f4f 	dsb	sy
 800157a:	607b      	str	r3, [r7, #4]
    }
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <xTaskIncrementTick+0x46>
 8001582:	4b72      	ldr	r3, [pc, #456]	@ (800174c <xTaskIncrementTick+0x214>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	4b71      	ldr	r3, [pc, #452]	@ (8001750 <xTaskIncrementTick+0x218>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a6f      	ldr	r2, [pc, #444]	@ (800174c <xTaskIncrementTick+0x214>)
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4a6f      	ldr	r2, [pc, #444]	@ (8001750 <xTaskIncrementTick+0x218>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b6f      	ldr	r3, [pc, #444]	@ (8001754 <xTaskIncrementTick+0x21c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	4a6d      	ldr	r2, [pc, #436]	@ (8001754 <xTaskIncrementTick+0x21c>)
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	f000 fbba 	bl	8001d18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80015a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001758 <xTaskIncrementTick+0x220>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	f0c0 80aa 	bcc.w	8001704 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015b0:	4b66      	ldr	r3, [pc, #408]	@ (800174c <xTaskIncrementTick+0x214>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015ba:	4b67      	ldr	r3, [pc, #412]	@ (8001758 <xTaskIncrementTick+0x220>)
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	601a      	str	r2, [r3, #0]
                    break;
 80015c2:	e09f      	b.n	8001704 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015c4:	4b61      	ldr	r3, [pc, #388]	@ (800174c <xTaskIncrementTick+0x214>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d203      	bcs.n	80015e4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80015dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001758 <xTaskIncrementTick+0x220>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80015e2:	e08f      	b.n	8001704 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	68d2      	ldr	r2, [r2, #12]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	6892      	ldr	r2, [r2, #8]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3304      	adds	r3, #4
 8001606:	429a      	cmp	r2, r3
 8001608:	d103      	bne.n	8001612 <xTaskIncrementTick+0xda>
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	2b00      	cmp	r3, #0
 8001628:	d01e      	beq.n	8001668 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	6a12      	ldr	r2, [r2, #32]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	69d2      	ldr	r2, [r2, #28]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	3318      	adds	r3, #24
 800164c:	429a      	cmp	r2, r3
 800164e:	d103      	bne.n	8001658 <xTaskIncrementTick+0x120>
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6a1a      	ldr	r2, [r3, #32]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fc6a 	bl	8004f44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	4b38      	ldr	r3, [pc, #224]	@ (800175c <xTaskIncrementTick+0x224>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	4a37      	ldr	r2, [pc, #220]	@ (800175c <xTaskIncrementTick+0x224>)
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001686:	4936      	ldr	r1, [pc, #216]	@ (8001760 <xTaskIncrementTick+0x228>)
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3304      	adds	r3, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	3204      	adds	r2, #4
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	1d1a      	adds	r2, r3, #4
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4a26      	ldr	r2, [pc, #152]	@ (8001760 <xTaskIncrementTick+0x228>)
 80016c6:	441a      	add	r2, r3
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d0:	4923      	ldr	r1, [pc, #140]	@ (8001760 <xTaskIncrementTick+0x228>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1c59      	adds	r1, r3, #1
 80016e0:	481f      	ldr	r0, [pc, #124]	@ (8001760 <xTaskIncrementTick+0x228>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4403      	add	r3, r0
 80016ec:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <xTaskIncrementTick+0x22c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f67f af59 	bls.w	80015b0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001702:	e755      	b.n	80015b0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <xTaskIncrementTick+0x22c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800170a:	4915      	ldr	r1, [pc, #84]	@ (8001760 <xTaskIncrementTick+0x228>)
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d901      	bls.n	8001720 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <xTaskIncrementTick+0x230>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8001728:	2301      	movs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
 800172c:	e004      	b.n	8001738 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <xTaskIncrementTick+0x234>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <xTaskIncrementTick+0x234>)
 8001736:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800173a:	4618      	mov	r0, r3
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000170 	.word	0x20000170
 8001748:	2000014c 	.word	0x2000014c
 800174c:	20000100 	.word	0x20000100
 8001750:	20000104 	.word	0x20000104
 8001754:	20000160 	.word	0x20000160
 8001758:	20000168 	.word	0x20000168
 800175c:	20000150 	.word	0x20000150
 8001760:	20000074 	.word	0x20000074
 8001764:	20000070 	.word	0x20000070
 8001768:	2000015c 	.word	0x2000015c
 800176c:	20000158 	.word	0x20000158

08001770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001776:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <vTaskSwitchContext+0xbc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800177e:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <vTaskSwitchContext+0xc0>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001784:	e04e      	b.n	8001824 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <vTaskSwitchContext+0xc0>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800178c:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <vTaskSwitchContext+0xc4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	f1c3 031f 	rsb	r3, r3, #31
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	4925      	ldr	r1, [pc, #148]	@ (8001838 <vTaskSwitchContext+0xc8>)
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10b      	bne.n	80017ce <vTaskSwitchContext+0x5e>
        __asm volatile
 80017b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	607b      	str	r3, [r7, #4]
    }
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	e7fd      	b.n	80017ca <vTaskSwitchContext+0x5a>
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <vTaskSwitchContext+0xc8>)
 80017da:	4413      	add	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	3308      	adds	r3, #8
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d104      	bne.n	80017fe <vTaskSwitchContext+0x8e>
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <vTaskSwitchContext+0xcc>)
 8001806:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <vTaskSwitchContext+0xcc>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <vTaskSwitchContext+0xd0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d102      	bne.n	800181a <vTaskSwitchContext+0xaa>
 8001814:	f003 faf6 	bl	8004e04 <SEGGER_SYSVIEW_OnIdle>
}
 8001818:	e004      	b.n	8001824 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <vTaskSwitchContext+0xcc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fb4e 	bl	8004ec0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000170 	.word	0x20000170
 8001830:	2000015c 	.word	0x2000015c
 8001834:	20000150 	.word	0x20000150
 8001838:	20000074 	.word	0x20000074
 800183c:	20000070 	.word	0x20000070
 8001840:	2000016c 	.word	0x2000016c

08001844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8001854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001858:	f383 8811 	msr	BASEPRI, r3
 800185c:	f3bf 8f6f 	isb	sy
 8001860:	f3bf 8f4f 	dsb	sy
 8001864:	60fb      	str	r3, [r7, #12]
    }
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <vTaskPlaceOnEventList+0x48>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3318      	adds	r3, #24
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7fe febe 	bl	80005f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800187a:	2101      	movs	r1, #1
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f000 fc47 	bl	8002110 <prvAddCurrentTaskToDelayedList>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000070 	.word	0x20000070

08001890 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10b      	bne.n	80018ba <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80018a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018a6:	f383 8811 	msr	BASEPRI, r3
 80018aa:	f3bf 8f6f 	isb	sy
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	613b      	str	r3, [r7, #16]
    }
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <vTaskPlaceOnEventListRestricted+0x90>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	61da      	str	r2, [r3, #28]
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <vTaskPlaceOnEventListRestricted+0x90>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	6892      	ldr	r2, [r2, #8]
 80018d0:	621a      	str	r2, [r3, #32]
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <vTaskPlaceOnEventListRestricted+0x90>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	3218      	adds	r2, #24
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <vTaskPlaceOnEventListRestricted+0x90>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f103 0218 	add.w	r2, r3, #24
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <vTaskPlaceOnEventListRestricted+0x90>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001908:	2024      	movs	r0, #36	@ 0x24
 800190a:	f002 fd7d 	bl	8004408 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f000 fbfd 	bl	8002110 <prvAddCurrentTaskToDelayedList>
    }
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000070 	.word	0x20000070

08001924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800193a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	60fb      	str	r3, [r7, #12]
    }
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	e7fd      	b.n	800194e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	6a12      	ldr	r2, [r2, #32]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	6a3a      	ldr	r2, [r7, #32]
 8001968:	69d2      	ldr	r2, [r2, #28]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	3318      	adds	r3, #24
 8001974:	429a      	cmp	r2, r3
 8001976:	d103      	bne.n	8001980 <xTaskRemoveFromEventList+0x5c>
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001990:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac0 <xTaskRemoveFromEventList+0x19c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d162      	bne.n	8001a5e <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	6a3a      	ldr	r2, [r7, #32]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	6892      	ldr	r2, [r2, #8]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	3304      	adds	r3, #4
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d103      	bne.n	80019c6 <xTaskRemoveFromEventList+0xa2>
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fab3 	bl	8004f44 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	2201      	movs	r2, #1
 80019e4:	409a      	lsls	r2, r3
 80019e6:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <xTaskRemoveFromEventList+0x1a0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	4a35      	ldr	r2, [pc, #212]	@ (8001ac4 <xTaskRemoveFromEventList+0x1a0>)
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019f4:	4934      	ldr	r1, [pc, #208]	@ (8001ac8 <xTaskRemoveFromEventList+0x1a4>)
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3304      	adds	r3, #4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	3204      	adds	r2, #4
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	1d1a      	adds	r2, r3, #4
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4a25      	ldr	r2, [pc, #148]	@ (8001ac8 <xTaskRemoveFromEventList+0x1a4>)
 8001a34:	441a      	add	r2, r3
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a3e:	4922      	ldr	r1, [pc, #136]	@ (8001ac8 <xTaskRemoveFromEventList+0x1a4>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1c59      	adds	r1, r3, #1
 8001a4e:	481e      	ldr	r0, [pc, #120]	@ (8001ac8 <xTaskRemoveFromEventList+0x1a4>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4403      	add	r3, r0
 8001a5a:	6019      	str	r1, [r3, #0]
 8001a5c:	e01b      	b.n	8001a96 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <xTaskRemoveFromEventList+0x1a8>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	61da      	str	r2, [r3, #28]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	621a      	str	r2, [r3, #32]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	6a3a      	ldr	r2, [r7, #32]
 8001a78:	3218      	adds	r2, #24
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	f103 0218 	add.w	r2, r3, #24
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	4a10      	ldr	r2, [pc, #64]	@ (8001acc <xTaskRemoveFromEventList+0x1a8>)
 8001a8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <xTaskRemoveFromEventList+0x1a8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <xTaskRemoveFromEventList+0x1a8>)
 8001a94:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <xTaskRemoveFromEventList+0x1ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d905      	bls.n	8001ab0 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <xTaskRemoveFromEventList+0x1b0>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e001      	b.n	8001ab4 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3728      	adds	r7, #40	@ 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000170 	.word	0x20000170
 8001ac4:	20000150 	.word	0x20000150
 8001ac8:	20000074 	.word	0x20000074
 8001acc:	20000108 	.word	0x20000108
 8001ad0:	20000070 	.word	0x20000070
 8001ad4:	2000015c 	.word	0x2000015c

08001ad8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <vTaskInternalSetTimeOutState+0x24>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <vTaskInternalSetTimeOutState+0x28>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	605a      	str	r2, [r3, #4]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20000160 	.word	0x20000160
 8001b00:	2000014c 	.word	0x2000014c

08001b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8001b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b18:	f383 8811 	msr	BASEPRI, r3
 8001b1c:	f3bf 8f6f 	isb	sy
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	613b      	str	r3, [r7, #16]
    }
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10b      	bne.n	8001b4a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8001b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	60fb      	str	r3, [r7, #12]
    }
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	e7fd      	b.n	8001b46 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001b4a:	f000 ff9f 	bl	8002a8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <xTaskCheckForTimeOut+0xc8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d102      	bne.n	8001b6e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e026      	b.n	8001bbc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <xTaskCheckForTimeOut+0xcc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d00a      	beq.n	8001b90 <xTaskCheckForTimeOut+0x8c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d305      	bcc.n	8001b90 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e015      	b.n	8001bbc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d20b      	bcs.n	8001bb2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	1ad2      	subs	r2, r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff96 	bl	8001ad8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	e004      	b.n	8001bbc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001bbc:	f000 ff98 	bl	8002af0 <vPortExitCritical>

    return xReturn;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000014c 	.word	0x2000014c
 8001bd0:	20000160 	.word	0x20000160

08001bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <vTaskMissedYield+0x14>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	2000015c 	.word	0x2000015c

08001bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001bf4:	f000 f852 	bl	8001c9c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <prvIdleTask+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d9f9      	bls.n	8001bf4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <prvIdleTask+0x2c>)
 8001c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001c10:	e7f0      	b.n	8001bf4 <prvIdleTask+0x8>
 8001c12:	bf00      	nop
 8001c14:	20000074 	.word	0x20000074
 8001c18:	e000ed04 	.word	0xe000ed04

08001c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	e00c      	b.n	8001c42 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <prvInitialiseTaskLists+0x60>)
 8001c34:	4413      	add	r3, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc8c 	bl	8000554 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d9ef      	bls.n	8001c28 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001c48:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <prvInitialiseTaskLists+0x64>)
 8001c4a:	f7fe fc83 	bl	8000554 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001c4e:	480d      	ldr	r0, [pc, #52]	@ (8001c84 <prvInitialiseTaskLists+0x68>)
 8001c50:	f7fe fc80 	bl	8000554 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001c54:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <prvInitialiseTaskLists+0x6c>)
 8001c56:	f7fe fc7d 	bl	8000554 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001c5a:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <prvInitialiseTaskLists+0x70>)
 8001c5c:	f7fe fc7a 	bl	8000554 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001c60:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <prvInitialiseTaskLists+0x74>)
 8001c62:	f7fe fc77 	bl	8000554 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <prvInitialiseTaskLists+0x78>)
 8001c68:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <prvInitialiseTaskLists+0x64>)
 8001c6a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <prvInitialiseTaskLists+0x7c>)
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <prvInitialiseTaskLists+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000074 	.word	0x20000074
 8001c80:	200000d8 	.word	0x200000d8
 8001c84:	200000ec 	.word	0x200000ec
 8001c88:	20000108 	.word	0x20000108
 8001c8c:	2000011c 	.word	0x2000011c
 8001c90:	20000134 	.word	0x20000134
 8001c94:	20000100 	.word	0x20000100
 8001c98:	20000104 	.word	0x20000104

08001c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ca2:	e019      	b.n	8001cd8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001ca4:	f000 fef2 	bl	8002a8c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ca8:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <prvCheckTasksWaitingTermination+0x50>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fcd7 	bl	8000668 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <prvCheckTasksWaitingTermination+0x54>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <prvCheckTasksWaitingTermination+0x54>)
 8001cc2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <prvCheckTasksWaitingTermination+0x58>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <prvCheckTasksWaitingTermination+0x58>)
 8001ccc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001cce:	f000 ff0f 	bl	8002af0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f810 	bl	8001cf8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <prvCheckTasksWaitingTermination+0x58>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e1      	bne.n	8001ca4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000011c 	.word	0x2000011c
 8001cf0:	20000148 	.word	0x20000148
 8001cf4:	20000130 	.word	0x20000130

08001cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 f8af 	bl	8002e68 <vPortFree>
            vPortFree( pxTCB );
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f001 f8ac 	bl	8002e68 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <prvResetNextTaskUnblockTime+0x30>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d104      	bne.n	8001d30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <prvResetNextTaskUnblockTime+0x34>)
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001d2e:	e005      	b.n	8001d3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <prvResetNextTaskUnblockTime+0x30>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <prvResetNextTaskUnblockTime+0x34>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000100 	.word	0x20000100
 8001d4c:	20000168 	.word	0x20000168

08001d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <xTaskGetSchedulerState+0x34>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	e008      	b.n	8001d76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <xTaskGetSchedulerState+0x38>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	e001      	b.n	8001d76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001d76:	687b      	ldr	r3, [r7, #4]
    }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000154 	.word	0x20000154
 8001d88:	20000170 	.word	0x20000170

08001d8c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8001da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	613b      	str	r3, [r7, #16]
    }
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001db8:	f000 fe68 	bl	8002a8c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3354      	adds	r3, #84	@ 0x54
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d022      	beq.n	8001e14 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001dce:	4b32      	ldr	r3, [pc, #200]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	3214      	adds	r2, #20
 8001dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	43d2      	mvns	r2, r2
 8001dde:	4011      	ands	r1, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	3214      	adds	r2, #20
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	3354      	adds	r3, #84	@ 0x54
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	6a38      	ldr	r0, [r7, #32]
 8001e00:	f000 f986 	bl	8002110 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001e04:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <xTaskGenericNotifyWait+0x110>)
 8001e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e14:	f000 fe6c 	bl	8002af0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001e18:	f000 fe38 	bl	8002a8c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	2040      	movs	r0, #64	@ 0x40
 8001e2a:	f002 fc17 	bl	800465c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	3214      	adds	r2, #20
 8001e3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3354      	adds	r3, #84	@ 0x54
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d002      	beq.n	8001e5c <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e00e      	b.n	8001e7a <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	3214      	adds	r2, #20
 8001e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	43d2      	mvns	r2, r2
 8001e6c:	4011      	ands	r1, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	3214      	adds	r2, #20
 8001e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <xTaskGenericNotifyWait+0x10c>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	3354      	adds	r3, #84	@ 0x54
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001e88:	f000 fe32 	bl	8002af0 <vPortExitCritical>

        return xReturn;
 8001e8c:	697b      	ldr	r3, [r7, #20]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000070 	.word	0x20000070
 8001e9c:	e000ed04 	.word	0xe000ed04

08001ea0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b090      	sub	sp, #64	@ 0x40
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <xTaskGenericNotify+0x30>
        __asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	623b      	str	r3, [r7, #32]
    }
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <xTaskGenericNotify+0x4e>
        __asm volatile
 8001ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eda:	f383 8811 	msr	BASEPRI, r3
 8001ede:	f3bf 8f6f 	isb	sy
 8001ee2:	f3bf 8f4f 	dsb	sy
 8001ee6:	61fb      	str	r3, [r7, #28]
    }
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8001ef2:	f000 fdcb 	bl	8002a8c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	3214      	adds	r2, #20
 8001f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f08:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4413      	add	r3, r2
 8001f10:	3354      	adds	r3, #84	@ 0x54
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3354      	adds	r3, #84	@ 0x54
 8001f20:	2202      	movs	r2, #2
 8001f22:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d83b      	bhi.n	8001fa2 <xTaskGenericNotify+0x102>
 8001f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f30 <xTaskGenericNotify+0x90>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001fc3 	.word	0x08001fc3
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f61 	.word	0x08001f61
 8001f3c:	08001f79 	.word	0x08001f79
 8001f40:	08001f87 	.word	0x08001f87
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	3214      	adds	r2, #20
 8001f4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	ea42 0103 	orr.w	r1, r2, r3
 8001f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	3214      	adds	r2, #20
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f5e:	e033      	b.n	8001fc8 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	3214      	adds	r2, #20
 8001f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	3214      	adds	r2, #20
 8001f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f76:	e027      	b.n	8001fc8 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	3214      	adds	r2, #20
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f84:	e020      	b.n	8001fc8 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d006      	beq.n	8001f9c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	3214      	adds	r2, #20
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001f9a:	e015      	b.n	8001fc8 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8001fa0:	e012      	b.n	8001fc8 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001fa2:	4b56      	ldr	r3, [pc, #344]	@ (80020fc <xTaskGenericNotify+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <xTaskGenericNotify+0x126>
        __asm volatile
 8001faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fae:	f383 8811 	msr	BASEPRI, r3
 8001fb2:	f3bf 8f6f 	isb	sy
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	61bb      	str	r3, [r7, #24]
    }
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <xTaskGenericNotify+0x11e>
                    break;
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <xTaskGenericNotify+0x128>

                    break;
 8001fc6:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fffc 	bl	8004fc8 <SEGGER_SYSVIEW_ShrinkId>
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	203e      	movs	r0, #62	@ 0x3e
 8001fde:	f002 fb3d 	bl	800465c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 8081 	bne.w	80020ee <xTaskGenericNotify+0x24e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002002:	6892      	ldr	r2, [r2, #8]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200c:	3304      	adds	r3, #4
 800200e:	429a      	cmp	r2, r3
 8002010:	d103      	bne.n	800201a <xTaskGenericNotify+0x17a>
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
 8002020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002028:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202c:	4618      	mov	r0, r3
 800202e:	f002 ff89 	bl	8004f44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	2201      	movs	r2, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <xTaskGenericNotify+0x260>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <xTaskGenericNotify+0x260>)
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	492e      	ldr	r1, [pc, #184]	@ (8002104 <xTaskGenericNotify+0x264>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
 800205a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800205c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800206e:	3204      	adds	r2, #4
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	1d1a      	adds	r2, r3, #4
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4a1f      	ldr	r2, [pc, #124]	@ (8002104 <xTaskGenericNotify+0x264>)
 8002088:	441a      	add	r2, r3
 800208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002092:	491c      	ldr	r1, [pc, #112]	@ (8002104 <xTaskGenericNotify+0x264>)
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1c59      	adds	r1, r3, #1
 80020a2:	4818      	ldr	r0, [pc, #96]	@ (8002104 <xTaskGenericNotify+0x264>)
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4403      	add	r3, r0
 80020ae:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <xTaskGenericNotify+0x230>
        __asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	617b      	str	r3, [r7, #20]
    }
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xTaskGenericNotify+0x22c>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <xTaskGenericNotify+0x268>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	429a      	cmp	r2, r3
 80020dc:	d907      	bls.n	80020ee <xTaskGenericNotify+0x24e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <xTaskGenericNotify+0x26c>)
 80020e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020ee:	f000 fcff 	bl	8002af0 <vPortExitCritical>

        return xReturn;
 80020f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80020f4:	4618      	mov	r0, r3
 80020f6:	3738      	adds	r7, #56	@ 0x38
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2000014c 	.word	0x2000014c
 8002100:	20000150 	.word	0x20000150
 8002104:	20000074 	.word	0x20000074
 8002108:	20000070 	.word	0x20000070
 800210c:	e000ed04 	.word	0xe000ed04

08002110 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800211a:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002120:	4b35      	ldr	r3, [pc, #212]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3304      	adds	r3, #4
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa9e 	bl	8000668 <uxListRemove>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002132:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	2201      	movs	r2, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <prvAddCurrentTaskToDelayedList+0xec>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4013      	ands	r3, r2
 8002146:	4a2d      	ldr	r2, [pc, #180]	@ (80021fc <prvAddCurrentTaskToDelayedList+0xec>)
 8002148:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d124      	bne.n	800219c <prvAddCurrentTaskToDelayedList+0x8c>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d021      	beq.n	800219c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002158:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <prvAddCurrentTaskToDelayedList+0xf0>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	6892      	ldr	r2, [r2, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	3204      	adds	r2, #4
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1d1a      	adds	r2, r3, #4
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <prvAddCurrentTaskToDelayedList+0xf0>)
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800219a:	e026      	b.n	80021ea <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d209      	bcs.n	80021c8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b4:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <prvAddCurrentTaskToDelayedList+0xf4>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3304      	adds	r3, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f7fe fa18 	bl	80005f6 <vListInsert>
}
 80021c6:	e010      	b.n	80021ea <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <prvAddCurrentTaskToDelayedList+0xf8>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7fe fa0e 	bl	80005f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80021da:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <prvAddCurrentTaskToDelayedList+0xfc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d202      	bcs.n	80021ea <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80021e4:	4a09      	ldr	r2, [pc, #36]	@ (800220c <prvAddCurrentTaskToDelayedList+0xfc>)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6013      	str	r3, [r2, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000014c 	.word	0x2000014c
 80021f8:	20000070 	.word	0x20000070
 80021fc:	20000150 	.word	0x20000150
 8002200:	20000134 	.word	0x20000134
 8002204:	20000104 	.word	0x20000104
 8002208:	20000100 	.word	0x20000100
 800220c:	20000168 	.word	0x20000168

08002210 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800221a:	f000 fa4f 	bl	80026bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <xTimerCreateTimerTask+0x58>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <xTimerCreateTimerTask+0x5c>)
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2302      	movs	r3, #2
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002234:	490e      	ldr	r1, [pc, #56]	@ (8002270 <xTimerCreateTimerTask+0x60>)
 8002236:	480f      	ldr	r0, [pc, #60]	@ (8002274 <xTimerCreateTimerTask+0x64>)
 8002238:	f7fe fd78 	bl	8000d2c <xTaskCreate>
 800223c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10b      	bne.n	800225c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8002244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	603b      	str	r3, [r7, #0]
    }
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800225c:	687b      	ldr	r3, [r7, #4]
    }
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001a4 	.word	0x200001a4
 800226c:	200001a8 	.word	0x200001a8
 8002270:	080070c8 	.word	0x080070c8
 8002274:	0800231d 	.word	0x0800231d

08002278 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002284:	e008      	b.n	8002298 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	18d1      	adds	r1, r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f8df 	bl	8002468 <prvInsertTimerInActiveList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ea      	bne.n	8002286 <prvReloadTimer+0xe>
        }
    }
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <prvProcessExpiredTimer+0x5c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3304      	adds	r3, #4
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f9c7 	bl	8000668 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff ffc3 	bl	8002278 <prvReloadTimer>
 80022f2:	e008      	b.n	8002306 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	4798      	blx	r3
    }
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000019c 	.word	0x2000019c

0800231c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f859 	bl	80023e0 <prvGetNextExpireTime>
 800232e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4619      	mov	r1, r3
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f805 	bl	8002344 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800233a:	f000 f8d7 	bl	80024ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800233e:	bf00      	nop
 8002340:	e7f0      	b.n	8002324 <prvTimerTask+0x8>
	...

08002344 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800234e:	f7fe ffc3 	bl	80012d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f866 	bl	8002428 <prvSampleTimeNow>
 800235c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d130      	bne.n	80023c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <prvProcessTimerOrBlockTask+0x3c>
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	429a      	cmp	r2, r3
 8002370:	d806      	bhi.n	8002380 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002372:	f7fe ffbf 	bl	80012f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff9f 	bl	80022bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800237e:	e024      	b.n	80023ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <prvProcessTimerOrBlockTask+0x90>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <prvProcessTimerOrBlockTask+0x50>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <prvProcessTimerOrBlockTask+0x52>
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <prvProcessTimerOrBlockTask+0x94>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fc8d 	bl	8000cc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023aa:	f7fe ffa3 	bl	80012f4 <xTaskResumeAll>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80023b4:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <prvProcessTimerOrBlockTask+0x98>)
 80023b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	f3bf 8f6f 	isb	sy
    }
 80023c4:	e001      	b.n	80023ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80023c6:	f7fe ff95 	bl	80012f4 <xTaskResumeAll>
    }
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200001a0 	.word	0x200001a0
 80023d8:	200001a4 	.word	0x200001a4
 80023dc:	e000ed04 	.word	0xe000ed04

080023e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <prvGetNextExpireTime+0x44>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <prvGetNextExpireTime+0x16>
 80023f2:	2201      	movs	r2, #1
 80023f4:	e000      	b.n	80023f8 <prvGetNextExpireTime+0x18>
 80023f6:	2200      	movs	r2, #0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <prvGetNextExpireTime+0x44>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e001      	b.n	8002414 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002414:	68fb      	ldr	r3, [r7, #12]
    }
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000019c 	.word	0x2000019c

08002428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002430:	f7ff f860 	bl	80014f4 <xTaskGetTickCount>
 8002434:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <prvSampleTimeNow+0x3c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d205      	bcs.n	800244c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002440:	f000 f916 	bl	8002670 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e002      	b.n	8002452 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <prvSampleTimeNow+0x3c>)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002458:	68fb      	ldr	r3, [r7, #12]
    }
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200001ac 	.word	0x200001ac

08002468 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d812      	bhi.n	80024b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	1ad2      	subs	r2, r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	429a      	cmp	r2, r3
 800249a:	d302      	bcc.n	80024a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800249c:	2301      	movs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e01b      	b.n	80024da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <prvInsertTimerInActiveList+0x7c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4610      	mov	r0, r2
 80024ae:	f7fe f8a2 	bl	80005f6 <vListInsert>
 80024b2:	e012      	b.n	80024da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d206      	bcs.n	80024ca <prvInsertTimerInActiveList+0x62>
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d302      	bcc.n	80024ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e007      	b.n	80024da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <prvInsertTimerInActiveList+0x80>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3304      	adds	r3, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7fe f88e 	bl	80005f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024da:	697b      	ldr	r3, [r7, #20]
    }
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200001a0 	.word	0x200001a0
 80024e8:	2000019c 	.word	0x2000019c

080024ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024f2:	e0a9      	b.n	8002648 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f2c0 80a6 	blt.w	8002648 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d004      	beq.n	8002512 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3304      	adds	r3, #4
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f8ab 	bl	8000668 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff87 	bl	8002428 <prvSampleTimeNow>
 800251a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3b01      	subs	r3, #1
 8002520:	2b08      	cmp	r3, #8
 8002522:	f200 808e 	bhi.w	8002642 <prvProcessReceivedCommands+0x156>
 8002526:	a201      	add	r2, pc, #4	@ (adr r2, 800252c <prvProcessReceivedCommands+0x40>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	08002551 	.word	0x08002551
 8002530:	08002551 	.word	0x08002551
 8002534:	080025b9 	.word	0x080025b9
 8002538:	080025cd 	.word	0x080025cd
 800253c:	08002619 	.word	0x08002619
 8002540:	08002551 	.word	0x08002551
 8002544:	08002551 	.word	0x08002551
 8002548:	080025b9 	.word	0x080025b9
 800254c:	080025cd 	.word	0x080025cd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	18d1      	adds	r1, r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	69f8      	ldr	r0, [r7, #28]
 8002570:	f7ff ff7a 	bl	8002468 <prvInsertTimerInActiveList>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d065      	beq.n	8002646 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4413      	add	r3, r2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4619      	mov	r1, r3
 8002594:	69f8      	ldr	r0, [r7, #28]
 8002596:	f7ff fe6f 	bl	8002278 <prvReloadTimer>
 800259a:	e008      	b.n	80025ae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	69f8      	ldr	r0, [r7, #28]
 80025b4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80025b6:	e046      	b.n	8002646 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80025ca:	e03d      	b.n	8002648 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	617b      	str	r3, [r7, #20]
    }
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	18d1      	adds	r1, r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	69f8      	ldr	r0, [r7, #28]
 8002612:	f7ff ff29 	bl	8002468 <prvInsertTimerInActiveList>
                        break;
 8002616:	e017      	b.n	8002648 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8002626:	69f8      	ldr	r0, [r7, #28]
 8002628:	f000 fc1e 	bl	8002e68 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800262c:	e00c      	b.n	8002648 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002640:	e002      	b.n	8002648 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <prvProcessReceivedCommands+0x15c>
                        break;
 8002646:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <prvProcessReceivedCommands+0x180>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f107 0108 	add.w	r1, r7, #8
 8002650:	2200      	movs	r2, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe f93c 	bl	80008d0 <xQueueReceive>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f47f af4a 	bne.w	80024f4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200001a4 	.word	0x200001a4

08002670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002676:	e009      	b.n	800268c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <prvSwitchTimerLists+0x44>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002682:	f04f 31ff 	mov.w	r1, #4294967295
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	f7ff fe18 	bl	80022bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <prvSwitchTimerLists+0x44>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <prvSwitchTimerLists+0x44>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <prvSwitchTimerLists+0x48>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <prvSwitchTimerLists+0x44>)
 80026a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80026a4:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <prvSwitchTimerLists+0x48>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
    }
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000019c 	.word	0x2000019c
 80026b8:	200001a0 	.word	0x200001a0

080026bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80026c0:	f000 f9e4 	bl	8002a8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <prvCheckForValidListAndQueue+0x54>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d11d      	bne.n	8002708 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80026cc:	4811      	ldr	r0, [pc, #68]	@ (8002714 <prvCheckForValidListAndQueue+0x58>)
 80026ce:	f7fd ff41 	bl	8000554 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80026d2:	4811      	ldr	r0, [pc, #68]	@ (8002718 <prvCheckForValidListAndQueue+0x5c>)
 80026d4:	f7fd ff3e 	bl	8000554 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <prvCheckForValidListAndQueue+0x60>)
 80026da:	4a0e      	ldr	r2, [pc, #56]	@ (8002714 <prvCheckForValidListAndQueue+0x58>)
 80026dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <prvCheckForValidListAndQueue+0x64>)
 80026e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <prvCheckForValidListAndQueue+0x5c>)
 80026e2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80026e4:	2200      	movs	r2, #0
 80026e6:	210c      	movs	r1, #12
 80026e8:	200a      	movs	r0, #10
 80026ea:	f7fe f879 	bl	80007e0 <xQueueGenericCreate>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <prvCheckForValidListAndQueue+0x54>)
 80026f2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <prvCheckForValidListAndQueue+0x54>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <prvCheckForValidListAndQueue+0x54>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4908      	ldr	r1, [pc, #32]	@ (8002724 <prvCheckForValidListAndQueue+0x68>)
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fa86 	bl	8000c14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002708:	f000 f9f2 	bl	8002af0 <vPortExitCritical>
    }
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200001a4 	.word	0x200001a4
 8002714:	20000174 	.word	0x20000174
 8002718:	20000188 	.word	0x20000188
 800271c:	2000019c 	.word	0x2000019c
 8002720:	200001a0 	.word	0x200001a0
 8002724:	080070d0 	.word	0x080070d0

08002728 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b04      	subs	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002740:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b04      	subs	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f023 0201 	bic.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3b04      	subs	r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002758:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <pxPortInitialiseStack+0x64>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3b14      	subs	r3, #20
 8002762:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3b04      	subs	r3, #4
 800276e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f06f 0202 	mvn.w	r2, #2
 8002776:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3b20      	subs	r3, #32
 800277c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	08002791 	.word	0x08002791

08002790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <prvTaskExitError+0x58>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a2:	d00b      	beq.n	80027bc <prvTaskExitError+0x2c>
        __asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	60fb      	str	r3, [r7, #12]
    }
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <prvTaskExitError+0x28>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	60bb      	str	r3, [r7, #8]
    }
 80027ce:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80027d0:	bf00      	nop
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0fc      	beq.n	80027d2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000004 	.word	0x20000004
 80027ec:	00000000 	.word	0x00000000

080027f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80027f0:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <pxCurrentTCBConst2>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	6808      	ldr	r0, [r1, #0]
 80027f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fa:	f380 8809 	msr	PSP, r0
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f380 8811 	msr	BASEPRI, r0
 800280a:	4770      	bx	lr
 800280c:	f3af 8000 	nop.w

08002810 <pxCurrentTCBConst2>:
 8002810:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop

08002818 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002818:	4808      	ldr	r0, [pc, #32]	@ (800283c <prvPortStartFirstTask+0x24>)
 800281a:	6800      	ldr	r0, [r0, #0]
 800281c:	6800      	ldr	r0, [r0, #0]
 800281e:	f380 8808 	msr	MSP, r0
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f380 8814 	msr	CONTROL, r0
 800282a:	b662      	cpsie	i
 800282c:	b661      	cpsie	f
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	df00      	svc	0
 8002838:	bf00      	nop
 800283a:	0000      	.short	0x0000
 800283c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop

08002844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800284a:	4b47      	ldr	r3, [pc, #284]	@ (8002968 <xPortStartScheduler+0x124>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a47      	ldr	r2, [pc, #284]	@ (800296c <xPortStartScheduler+0x128>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d10b      	bne.n	800286c <xPortStartScheduler+0x28>
        __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	613b      	str	r3, [r7, #16]
    }
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800286c:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <xPortStartScheduler+0x124>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3f      	ldr	r2, [pc, #252]	@ (8002970 <xPortStartScheduler+0x12c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10b      	bne.n	800288e <xPortStartScheduler+0x4a>
        __asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	60fb      	str	r3, [r7, #12]
    }
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	e7fd      	b.n	800288a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800288e:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <xPortStartScheduler+0x130>)
 8002890:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	22ff      	movs	r2, #255	@ 0xff
 800289e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <xPortStartScheduler+0x134>)
 80028b4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028b6:	4b31      	ldr	r3, [pc, #196]	@ (800297c <xPortStartScheduler+0x138>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028bc:	e009      	b.n	80028d2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80028be:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <xPortStartScheduler+0x138>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	4a2d      	ldr	r2, [pc, #180]	@ (800297c <xPortStartScheduler+0x138>)
 80028c6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028da:	2b80      	cmp	r3, #128	@ 0x80
 80028dc:	d0ef      	beq.n	80028be <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <xPortStartScheduler+0x138>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d00b      	beq.n	8002902 <xPortStartScheduler+0xbe>
        __asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	60bb      	str	r3, [r7, #8]
    }
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <xPortStartScheduler+0x138>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4a1c      	ldr	r2, [pc, #112]	@ (800297c <xPortStartScheduler+0x138>)
 800290a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <xPortStartScheduler+0x138>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002914:	4a19      	ldr	r2, [pc, #100]	@ (800297c <xPortStartScheduler+0x138>)
 8002916:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002920:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <xPortStartScheduler+0x13c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <xPortStartScheduler+0x13c>)
 8002926:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800292a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800292c:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <xPortStartScheduler+0x13c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a13      	ldr	r2, [pc, #76]	@ (8002980 <xPortStartScheduler+0x13c>)
 8002932:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002936:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002938:	f000 f968 	bl	8002c0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <xPortStartScheduler+0x140>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002942:	f000 f987 	bl	8002c54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <xPortStartScheduler+0x144>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0f      	ldr	r2, [pc, #60]	@ (8002988 <xPortStartScheduler+0x144>)
 800294c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002950:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002952:	f7ff ff61 	bl	8002818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002956:	f7fe ff0b 	bl	8001770 <vTaskSwitchContext>
    prvTaskExitError();
 800295a:	f7ff ff19 	bl	8002790 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed00 	.word	0xe000ed00
 800296c:	410fc271 	.word	0x410fc271
 8002970:	410fc270 	.word	0x410fc270
 8002974:	e000e400 	.word	0xe000e400
 8002978:	200001b0 	.word	0x200001b0
 800297c:	200001b4 	.word	0x200001b4
 8002980:	e000ed20 	.word	0xe000ed20
 8002984:	20000004 	.word	0x20000004
 8002988:	e000ef34 	.word	0xe000ef34

0800298c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002992:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <vInitPrioGroupValue+0xe8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a38      	ldr	r2, [pc, #224]	@ (8002a78 <vInitPrioGroupValue+0xec>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10b      	bne.n	80029b4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	613b      	str	r3, [r7, #16]
    }
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <vInitPrioGroupValue+0xe8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a30      	ldr	r2, [pc, #192]	@ (8002a7c <vInitPrioGroupValue+0xf0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d10b      	bne.n	80029d6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	60fb      	str	r3, [r7, #12]
    }
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	e7fd      	b.n	80029d2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <vInitPrioGroupValue+0xf4>)
 80029d8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	22ff      	movs	r2, #255	@ 0xff
 80029e6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <vInitPrioGroupValue+0xf8>)
 80029fc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029fe:	4b22      	ldr	r3, [pc, #136]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a04:	e009      	b.n	8002a1a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002a06:	4b20      	ldr	r3, [pc, #128]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a0e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b80      	cmp	r3, #128	@ 0x80
 8002a24:	d0ef      	beq.n	8002a06 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a26:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d00b      	beq.n	8002a4a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	60bb      	str	r3, [r7, #8]
    }
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a52:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <vInitPrioGroupValue+0xfc>)
 8002a5e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00
 8002a78:	410fc271 	.word	0x410fc271
 8002a7c:	410fc270 	.word	0x410fc270
 8002a80:	e000e400 	.word	0xe000e400
 8002a84:	200001b0 	.word	0x200001b0
 8002a88:	200001b4 	.word	0x200001b4

08002a8c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	607b      	str	r3, [r7, #4]
    }
 8002aa4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <vPortEnterCritical+0x5c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <vPortEnterCritical+0x5c>)
 8002aae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <vPortEnterCritical+0x5c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d110      	bne.n	8002ada <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <vPortEnterCritical+0x60>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <vPortEnterCritical+0x4e>
        __asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	603b      	str	r3, [r7, #0]
    }
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	e7fd      	b.n	8002ad6 <vPortEnterCritical+0x4a>
    }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <vPortExitCritical+0x50>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <vPortExitCritical+0x26>
        __asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	607b      	str	r3, [r7, #4]
    }
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <vPortExitCritical+0x50>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	4a08      	ldr	r2, [pc, #32]	@ (8002b40 <vPortExitCritical+0x50>)
 8002b1e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <vPortExitCritical+0x50>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <vPortExitCritical+0x44>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b32:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	20000004 	.word	0x20000004
	...

08002b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b50:	f3ef 8009 	mrs	r0, PSP
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <pxCurrentTCBConst>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	f01e 0f10 	tst.w	lr, #16
 8002b60:	bf08      	it	eq
 8002b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	6010      	str	r0, [r2, #0]
 8002b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b74:	f380 8811 	msr	BASEPRI, r0
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f7fe fdf6 	bl	8001770 <vTaskSwitchContext>
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f380 8811 	msr	BASEPRI, r0
 8002b8c:	bc09      	pop	{r0, r3}
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	6808      	ldr	r0, [r1, #0]
 8002b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b96:	f01e 0f10 	tst.w	lr, #16
 8002b9a:	bf08      	it	eq
 8002b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ba0:	f380 8809 	msr	PSP, r0
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w

08002bb0 <pxCurrentTCBConst>:
 8002bb0:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop

08002bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
        __asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	607b      	str	r3, [r7, #4]
    }
 8002bd0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002bd2:	f002 f89d 	bl	8004d10 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002bd6:	f7fe fcaf 	bl	8001538 <xTaskIncrementTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002be0:	f002 f8f4 	bl	8004dcc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002be4:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <SysTick_Handler+0x50>)
 8002be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e001      	b.n	8002bf2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002bee:	f002 f8d1 	bl	8004d94 <SEGGER_SYSVIEW_RecordExitISR>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f383 8811 	msr	BASEPRI, r3
    }
 8002bfc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <vPortSetupTimerInterrupt+0x34>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <vPortSetupTimerInterrupt+0x38>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <vPortSetupTimerInterrupt+0x3c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <vPortSetupTimerInterrupt+0x40>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <vPortSetupTimerInterrupt+0x44>)
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c2e:	4b04      	ldr	r3, [pc, #16]	@ (8002c40 <vPortSetupTimerInterrupt+0x34>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010
 8002c44:	e000e018 	.word	0xe000e018
 8002c48:	20000008 	.word	0x20000008
 8002c4c:	10624dd3 	.word	0x10624dd3
 8002c50:	e000e014 	.word	0xe000e014

08002c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002c64 <vPortEnableVFP+0x10>
 8002c58:	6801      	ldr	r1, [r0, #0]
 8002c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002c5e:	6001      	str	r1, [r0, #0]
 8002c60:	4770      	bx	lr
 8002c62:	0000      	.short	0x0000
 8002c64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop

08002c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002c72:	f3ef 8305 	mrs	r3, IPSR
 8002c76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	d915      	bls.n	8002caa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <vPortValidateInterruptPriority+0x74>)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c88:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <vPortValidateInterruptPriority+0x78>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	7afa      	ldrb	r2, [r7, #11]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20b      	bcs.n	8002caa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	607b      	str	r3, [r7, #4]
    }
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	e7fd      	b.n	8002ca6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002caa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <vPortValidateInterruptPriority+0x7c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cec <vPortValidateInterruptPriority+0x80>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90b      	bls.n	8002cd2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	603b      	str	r3, [r7, #0]
    }
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <vPortValidateInterruptPriority+0x62>
    }
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e3f0 	.word	0xe000e3f0
 8002ce4:	200001b0 	.word	0x200001b0
 8002ce8:	e000ed0c 	.word	0xe000ed0c
 8002cec:	200001b4 	.word	0x200001b4

08002cf0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002cfc:	f7fe faec 	bl	80012d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002d00:	4b54      	ldr	r3, [pc, #336]	@ (8002e54 <pvPortMalloc+0x164>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002d08:	f000 f90c 	bl	8002f24 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002d12:	2208      	movs	r2, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d804      	bhi.n	8002d34 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	e001      	b.n	8002d38 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db71      	blt.n	8002e22 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d06e      	beq.n	8002e22 <pvPortMalloc+0x132>
 8002d44:	4b44      	ldr	r3, [pc, #272]	@ (8002e58 <pvPortMalloc+0x168>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d869      	bhi.n	8002e22 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002d4e:	4b43      	ldr	r3, [pc, #268]	@ (8002e5c <pvPortMalloc+0x16c>)
 8002d50:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002d52:	4b42      	ldr	r3, [pc, #264]	@ (8002e5c <pvPortMalloc+0x16c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d58:	e004      	b.n	8002d64 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d903      	bls.n	8002d76 <pvPortMalloc+0x86>
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f1      	bne.n	8002d5a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <pvPortMalloc+0x164>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d050      	beq.n	8002e22 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4413      	add	r3, r2
 8002d88:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad2      	subs	r2, r2, r3
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d920      	bls.n	8002de4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <pvPortMalloc+0xdc>
        __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
    }
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f000 f8fc 	bl	8002fdc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <pvPortMalloc+0x168>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <pvPortMalloc+0x168>)
 8002df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <pvPortMalloc+0x168>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <pvPortMalloc+0x170>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dfe:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <pvPortMalloc+0x168>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <pvPortMalloc+0x170>)
 8002e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <pvPortMalloc+0x174>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <pvPortMalloc+0x174>)
 8002e20:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e22:	f7fe fa67 	bl	80012f4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <pvPortMalloc+0x158>
        __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	60fb      	str	r3, [r7, #12]
    }
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <pvPortMalloc+0x154>
    return pvReturn;
 8002e48:	69fb      	ldr	r3, [r7, #28]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012dc0 	.word	0x20012dc0
 8002e58:	20012dc4 	.word	0x20012dc4
 8002e5c:	20012db8 	.word	0x20012db8
 8002e60:	20012dc8 	.word	0x20012dc8
 8002e64:	20012dcc 	.word	0x20012dcc

08002e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04b      	beq.n	8002f12 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	425b      	negs	r3, r3
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0b      	blt.n	8002ea8 <vPortFree+0x40>
        __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	60fb      	str	r3, [r7, #12]
    }
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <vPortFree+0x60>
        __asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	60bb      	str	r3, [r7, #8]
    }
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0fdb      	lsrs	r3, r3, #31
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01c      	beq.n	8002f12 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d118      	bne.n	8002f12 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002eec:	f7fe f9f4 	bl	80012d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <vPortFree+0xb4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a08      	ldr	r2, [pc, #32]	@ (8002f1c <vPortFree+0xb4>)
 8002efc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002efe:	6938      	ldr	r0, [r7, #16]
 8002f00:	f000 f86c 	bl	8002fdc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <vPortFree+0xb8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <vPortFree+0xb8>)
 8002f0c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f0e:	f7fe f9f1 	bl	80012f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20012dc4 	.word	0x20012dc4
 8002f20:	20012dd0 	.word	0x20012dd0

08002f24 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f2a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <prvHeapInit+0xa4>)
 8002f32:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3307      	adds	r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <prvHeapInit+0xa4>)
 8002f54:	4413      	add	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fcc <prvHeapInit+0xa8>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <prvHeapInit+0xa8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002f70:	2208      	movs	r2, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0307 	bic.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <prvHeapInit+0xac>)
 8002f84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002f86:	4b12      	ldr	r3, [pc, #72]	@ (8002fd0 <prvHeapInit+0xac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <prvHeapInit+0xac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <prvHeapInit+0xac>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <prvHeapInit+0xb0>)
 8002fb2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <prvHeapInit+0xb4>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	200001b8 	.word	0x200001b8
 8002fcc:	20012db8 	.word	0x20012db8
 8002fd0:	20012dc0 	.word	0x20012dc0
 8002fd4:	20012dc8 	.word	0x20012dc8
 8002fd8:	20012dc4 	.word	0x20012dc4

08002fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fe4:	4b28      	ldr	r3, [pc, #160]	@ (8003088 <prvInsertBlockIntoFreeList+0xac>)
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e002      	b.n	8002ff0 <prvInsertBlockIntoFreeList+0x14>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d8f7      	bhi.n	8002fea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4413      	add	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d108      	bne.n	800301e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	441a      	add	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d118      	bne.n	8003064 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <prvInsertBlockIntoFreeList+0xb0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d00d      	beq.n	800305a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e008      	b.n	800306c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800305a:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <prvInsertBlockIntoFreeList+0xb0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e003      	b.n	800306c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d002      	beq.n	800307a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20012db8 	.word	0x20012db8
 800308c:	20012dc0 	.word	0x20012dc0

08003090 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003094:	4803      	ldr	r0, [pc, #12]	@ (80030a4 <_cbSendSystemDesc+0x14>)
 8003096:	f001 fde5 	bl	8004c64 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800309a:	4803      	ldr	r0, [pc, #12]	@ (80030a8 <_cbSendSystemDesc+0x18>)
 800309c:	f001 fde2 	bl	8004c64 <SEGGER_SYSVIEW_SendSysDesc>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	080070d8 	.word	0x080070d8
 80030a8:	08007118 	.word	0x08007118

080030ac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <SEGGER_SYSVIEW_Conf+0x20>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <SEGGER_SYSVIEW_Conf+0x20>)
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <SEGGER_SYSVIEW_Conf+0x24>)
 80030ba:	4a06      	ldr	r2, [pc, #24]	@ (80030d4 <SEGGER_SYSVIEW_Conf+0x28>)
 80030bc:	f001 f950 	bl	8004360 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80030c0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80030c4:	f001 f990 	bl	80043e8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000008 	.word	0x20000008
 80030d0:	08003091 	.word	0x08003091
 80030d4:	08007258 	.word	0x08007258

080030d8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	e033      	b.n	800314c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80030e4:	491e      	ldr	r1, [pc, #120]	@ (8003160 <_cbSendTaskList+0x88>)
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	491a      	ldr	r1, [pc, #104]	@ (8003160 <_cbSendTaskList+0x88>)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3304      	adds	r3, #4
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	4c16      	ldr	r4, [pc, #88]	@ (8003160 <_cbSendTaskList+0x88>)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4423      	add	r3, r4
 8003114:	3308      	adds	r3, #8
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	4d11      	ldr	r5, [pc, #68]	@ (8003160 <_cbSendTaskList+0x88>)
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	442b      	add	r3, r5
 8003126:	330c      	adds	r3, #12
 8003128:	681d      	ldr	r5, [r3, #0]
 800312a:	4e0d      	ldr	r6, [pc, #52]	@ (8003160 <_cbSendTaskList+0x88>)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4433      	add	r3, r6
 8003138:	3310      	adds	r3, #16
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462b      	mov	r3, r5
 8003140:	4622      	mov	r2, r4
 8003142:	f000 f979 	bl	8003438 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3301      	adds	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <_cbSendTaskList+0x8c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3c6      	bcc.n	80030e4 <_cbSendTaskList+0xc>
  }
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003160:	20012dd4 	.word	0x20012dd4
 8003164:	20012e74 	.word	0x20012e74

08003168 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003170:	f7fe f9d0 	bl	8001514 <xTaskGetTickCountFromISR>
 8003174:	4603      	mov	r3, r0
 8003176:	2200      	movs	r2, #0
 8003178:	469a      	mov	sl, r3
 800317a:	4693      	mov	fp, r2
 800317c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003180:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	f04f 0a00 	mov.w	sl, #0
 800318c:	f04f 0b00 	mov.w	fp, #0
 8003190:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003194:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003198:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800319c:	4652      	mov	r2, sl
 800319e:	465b      	mov	r3, fp
 80031a0:	1a14      	subs	r4, r2, r0
 80031a2:	eb63 0501 	sbc.w	r5, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	00ab      	lsls	r3, r5, #2
 80031b0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80031b4:	00a2      	lsls	r2, r4, #2
 80031b6:	4614      	mov	r4, r2
 80031b8:	461d      	mov	r5, r3
 80031ba:	eb14 0800 	adds.w	r8, r4, r0
 80031be:	eb45 0901 	adc.w	r9, r5, r1
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031d6:	4690      	mov	r8, r2
 80031d8:	4699      	mov	r9, r3
 80031da:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80031de:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080031f0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80031fe:	2205      	movs	r2, #5
 8003200:	492b      	ldr	r1, [pc, #172]	@ (80032b0 <SYSVIEW_AddTask+0xc0>)
 8003202:	68b8      	ldr	r0, [r7, #8]
 8003204:	f003 ff06 	bl	8007014 <memcmp>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04b      	beq.n	80032a6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800320e:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b07      	cmp	r3, #7
 8003214:	d903      	bls.n	800321e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003216:	4828      	ldr	r0, [pc, #160]	@ (80032b8 <SYSVIEW_AddTask+0xc8>)
 8003218:	f001 ffe0 	bl	80051dc <SEGGER_SYSVIEW_Warn>
    return;
 800321c:	e044      	b.n	80032a8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4926      	ldr	r1, [pc, #152]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4921      	ldr	r1, [pc, #132]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3304      	adds	r3, #4
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003248:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	491b      	ldr	r1, [pc, #108]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3308      	adds	r3, #8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4916      	ldr	r1, [pc, #88]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	330c      	adds	r3, #12
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4910      	ldr	r1, [pc, #64]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	3310      	adds	r3, #16
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	4a08      	ldr	r2, [pc, #32]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003292:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f8ca 	bl	8003438 <SYSVIEW_SendTaskInfo>
 80032a4:	e000      	b.n	80032a8 <SYSVIEW_AddTask+0xb8>
    return;
 80032a6:	bf00      	nop

}
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	08007128 	.word	0x08007128
 80032b4:	20012e74 	.word	0x20012e74
 80032b8:	08007130 	.word	0x08007130
 80032bc:	20012dd4 	.word	0x20012dd4

080032c0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80032c8:	4b59      	ldr	r3, [pc, #356]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80ab 	beq.w	8003428 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e00d      	b.n	80032f4 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80032d8:	4956      	ldr	r1, [pc, #344]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d008      	beq.n	8003300 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3ec      	bcc.n	80032d8 <SYSVIEW_DeleteTask+0x18>
 80032fe:	e000      	b.n	8003302 <SYSVIEW_DeleteTask+0x42>
      break;
 8003300:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003302:	4b4b      	ldr	r3, [pc, #300]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	429a      	cmp	r2, r3
 800330c:	d111      	bne.n	8003332 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4a46      	ldr	r2, [pc, #280]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 800331a:	4413      	add	r3, r2
 800331c:	2214      	movs	r2, #20
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fe87 	bl	8007034 <memset>
    _NumTasks--;
 8003326:	4b42      	ldr	r3, [pc, #264]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3b01      	subs	r3, #1
 800332c:	4a40      	ldr	r2, [pc, #256]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e07b      	b.n	800342a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003332:	4b3f      	ldr	r3, [pc, #252]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d276      	bcs.n	800342a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800333c:	4b3c      	ldr	r3, [pc, #240]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	493c      	ldr	r1, [pc, #240]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	4838      	ldr	r0, [pc, #224]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4403      	add	r3, r0
 800335e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003360:	4b33      	ldr	r3, [pc, #204]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	4933      	ldr	r1, [pc, #204]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3304      	adds	r3, #4
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	482f      	ldr	r0, [pc, #188]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	3304      	adds	r3, #4
 8003386:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003388:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	4929      	ldr	r1, [pc, #164]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3308      	adds	r3, #8
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	4825      	ldr	r0, [pc, #148]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4403      	add	r3, r0
 80033ac:	3308      	adds	r3, #8
 80033ae:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80033b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1e5a      	subs	r2, r3, #1
 80033b6:	491f      	ldr	r1, [pc, #124]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	330c      	adds	r3, #12
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	481b      	ldr	r0, [pc, #108]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4403      	add	r3, r0
 80033d4:	330c      	adds	r3, #12
 80033d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80033d8:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	1e5a      	subs	r2, r3, #1
 80033de:	4915      	ldr	r1, [pc, #84]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3310      	adds	r3, #16
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	4811      	ldr	r0, [pc, #68]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	3310      	adds	r3, #16
 80033fe:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003400:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a09      	ldr	r2, [pc, #36]	@ (8003434 <SYSVIEW_DeleteTask+0x174>)
 8003410:	4413      	add	r3, r2
 8003412:	2214      	movs	r2, #20
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fe0c 	bl	8007034 <memset>
    _NumTasks--;
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3b01      	subs	r3, #1
 8003422:	4a03      	ldr	r2, [pc, #12]	@ (8003430 <SYSVIEW_DeleteTask+0x170>)
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e000      	b.n	800342a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003428:	bf00      	nop
  }
}
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20012e74 	.word	0x20012e74
 8003434:	20012dd4 	.word	0x20012dd4

08003438 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003446:	f107 0310 	add.w	r3, r7, #16
 800344a:	2218      	movs	r2, #24
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f003 fdf0 	bl	8007034 <memset>
  TaskInfo.TaskID     = TaskID;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	4618      	mov	r0, r3
 800346e:	f001 fb01 	bl	8004a74 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	@ 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003482:	4b26      	ldr	r3, [pc, #152]	@ (800351c <_DoInit+0xa0>)
 8003484:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003486:	22a8      	movs	r2, #168	@ 0xa8
 8003488:	2100      	movs	r1, #0
 800348a:	6838      	ldr	r0, [r7, #0]
 800348c:	f003 fdd2 	bl	8007034 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2203      	movs	r2, #3
 8003494:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2203      	movs	r2, #3
 800349a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4a20      	ldr	r2, [pc, #128]	@ (8003520 <_DoInit+0xa4>)
 80034a0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <_DoInit+0xa8>)
 80034a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <_DoInit+0xa4>)
 80034c6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4a17      	ldr	r2, [pc, #92]	@ (8003528 <_DoInit+0xac>)
 80034cc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80034e6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	e00c      	b.n	800350a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1c3 030f 	rsb	r3, r3, #15
 80034f6:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <_DoInit+0xb0>)
 80034f8:	5cd1      	ldrb	r1, [r2, r3]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	460a      	mov	r2, r1
 8003502:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3301      	adds	r3, #1
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d9ef      	bls.n	80034f0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003510:	f3bf 8f5f 	dmb	sy
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20012e78 	.word	0x20012e78
 8003520:	08007180 	.word	0x08007180
 8003524:	20012f20 	.word	0x20012f20
 8003528:	20013320 	.word	0x20013320
 800352c:	08007260 	.word	0x08007260

08003530 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	@ 0x30
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800353c:	4b3e      	ldr	r3, [pc, #248]	@ (8003638 <SEGGER_RTT_ReadNoLock+0x108>)
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b53      	cmp	r3, #83	@ 0x53
 8003548:	d001      	beq.n	800354e <SEGGER_RTT_ReadNoLock+0x1e>
 800354a:	f7ff ff97 	bl	800347c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	3360      	adds	r3, #96	@ 0x60
 800355a:	4a37      	ldr	r2, [pc, #220]	@ (8003638 <SEGGER_RTT_ReadNoLock+0x108>)
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	429a      	cmp	r2, r3
 800357a:	d92b      	bls.n	80035d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4293      	cmp	r3, r2
 800358c:	bf28      	it	cs
 800358e:	4613      	movcs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003598:	4413      	add	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035a2:	f003 fd73 	bl	800708c <memcpy>
    NumBytesRead += NumBytesRem;
 80035a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	4413      	add	r3, r2
 80035ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80035ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80035be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4413      	add	r3, r2
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d101      	bne.n	80035d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf28      	it	cs
 80035e4:	4613      	movcs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	4413      	add	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	6939      	ldr	r1, [r7, #16]
 80035fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035fe:	f003 fd45 	bl	800708c <memcpy>
    NumBytesRead += NumBytesRem;
 8003602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4413      	add	r3, r2
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4413      	add	r3, r2
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800361a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4413      	add	r3, r2
 8003620:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800362c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003630:	4618      	mov	r0, r3
 8003632:	3730      	adds	r7, #48	@ 0x30
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20012e78 	.word	0x20012e78

0800363c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800364a:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b53      	cmp	r3, #83	@ 0x53
 8003656:	d001      	beq.n	800365c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003658:	f7ff ff10 	bl	800347c <_DoInit>
  SEGGER_RTT_LOCK();
 800365c:	f3ef 8311 	mrs	r3, BASEPRI
 8003660:	f04f 0120 	mov.w	r1, #32
 8003664:	f381 8811 	msr	BASEPRI, r1
 8003668:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800366a:	4b35      	ldr	r3, [pc, #212]	@ (8003740 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800366c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003672:	6939      	ldr	r1, [r7, #16]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	3304      	adds	r3, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	429a      	cmp	r2, r3
 8003698:	dbeb      	blt.n	8003672 <SEGGER_RTT_AllocUpBuffer+0x36>
 800369a:	e000      	b.n	800369e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800369c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	da3f      	bge.n	8003728 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80036a8:	6939      	ldr	r1, [r7, #16]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80036bc:	6939      	ldr	r1, [r7, #16]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	3304      	adds	r3, #4
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	3320      	adds	r3, #32
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3328      	adds	r3, #40	@ 0x28
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80036fa:	6939      	ldr	r1, [r7, #16]
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3324      	adds	r3, #36	@ 0x24
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800370e:	6939      	ldr	r1, [r7, #16]
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	440b      	add	r3, r1
 800371c:	332c      	adds	r3, #44	@ 0x2c
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003722:	f3bf 8f5f 	dmb	sy
 8003726:	e002      	b.n	800372e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003728:	f04f 33ff 	mov.w	r3, #4294967295
 800372c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003734:	69fb      	ldr	r3, [r7, #28]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20012e78 	.word	0x20012e78

08003744 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	@ 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003752:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b53      	cmp	r3, #83	@ 0x53
 800375e:	d001      	beq.n	8003764 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003760:	f7ff fe8c 	bl	800347c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003764:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003766:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d82c      	bhi.n	80037c8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800376e:	f3ef 8311 	mrs	r3, BASEPRI
 8003772:	f04f 0120 	mov.w	r1, #32
 8003776:	f381 8811 	msr	BASEPRI, r1
 800377a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	3360      	adds	r3, #96	@ 0x60
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80037b8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c6:	e002      	b.n	80037ce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3728      	adds	r7, #40	@ 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20012e78 	.word	0x20012e78

080037dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	60fa      	str	r2, [r7, #12]
 80037f2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b80      	cmp	r3, #128	@ 0x80
 80037f8:	d90a      	bls.n	8003810 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80037fe:	e007      	b.n	8003810 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	1c53      	adds	r3, r2, #1
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	60f9      	str	r1, [r7, #12]
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <_EncodeStr+0x46>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ee      	bne.n	8003800 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	b2da      	uxtb	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800385a:	4b34      	ldr	r3, [pc, #208]	@ (800392c <_HandleIncomingPacket+0xd8>)
 800385c:	7e1b      	ldrb	r3, [r3, #24]
 800385e:	4618      	mov	r0, r3
 8003860:	1cfb      	adds	r3, r7, #3
 8003862:	2201      	movs	r2, #1
 8003864:	4619      	mov	r1, r3
 8003866:	f7ff fe63 	bl	8003530 <SEGGER_RTT_ReadNoLock>
 800386a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d057      	beq.n	8003922 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	d031      	beq.n	80038dc <_HandleIncomingPacket+0x88>
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	dc40      	bgt.n	80038fe <_HandleIncomingPacket+0xaa>
 800387c:	2b07      	cmp	r3, #7
 800387e:	dc15      	bgt.n	80038ac <_HandleIncomingPacket+0x58>
 8003880:	2b00      	cmp	r3, #0
 8003882:	dd3c      	ble.n	80038fe <_HandleIncomingPacket+0xaa>
 8003884:	3b01      	subs	r3, #1
 8003886:	2b06      	cmp	r3, #6
 8003888:	d839      	bhi.n	80038fe <_HandleIncomingPacket+0xaa>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <_HandleIncomingPacket+0x3c>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038b3 	.word	0x080038b3
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038bf 	.word	0x080038bf
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	080038cb 	.word	0x080038cb
 80038a4:	080038d1 	.word	0x080038d1
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80038ae:	d033      	beq.n	8003918 <_HandleIncomingPacket+0xc4>
 80038b0:	e025      	b.n	80038fe <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80038b2:	f000 ff65 	bl	8004780 <SEGGER_SYSVIEW_Start>
      break;
 80038b6:	e034      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80038b8:	f001 f81c 	bl	80048f4 <SEGGER_SYSVIEW_Stop>
      break;
 80038bc:	e031      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80038be:	f001 f9f5 	bl	8004cac <SEGGER_SYSVIEW_RecordSystime>
      break;
 80038c2:	e02e      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80038c4:	f001 f9ba 	bl	8004c3c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80038c8:	e02b      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80038ca:	f001 f839 	bl	8004940 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80038ce:	e028      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80038d0:	f001 fc32 	bl	8005138 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80038d4:	e025      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80038d6:	f001 fc11 	bl	80050fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80038da:	e022      	b.n	8003922 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80038dc:	4b13      	ldr	r3, [pc, #76]	@ (800392c <_HandleIncomingPacket+0xd8>)
 80038de:	7e1b      	ldrb	r3, [r3, #24]
 80038e0:	4618      	mov	r0, r3
 80038e2:	1cfb      	adds	r3, r7, #3
 80038e4:	2201      	movs	r2, #1
 80038e6:	4619      	mov	r1, r3
 80038e8:	f7ff fe22 	bl	8003530 <SEGGER_RTT_ReadNoLock>
 80038ec:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fb76 	bl	8004fe8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80038fc:	e00e      	b.n	800391c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	b25b      	sxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	da0c      	bge.n	8003920 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003906:	4b09      	ldr	r3, [pc, #36]	@ (800392c <_HandleIncomingPacket+0xd8>)
 8003908:	7e1b      	ldrb	r3, [r3, #24]
 800390a:	4618      	mov	r0, r3
 800390c:	1cfb      	adds	r3, r7, #3
 800390e:	2201      	movs	r2, #1
 8003910:	4619      	mov	r1, r3
 8003912:	f7ff fe0d 	bl	8003530 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003916:	e003      	b.n	8003920 <_HandleIncomingPacket+0xcc>
      break;
 8003918:	bf00      	nop
 800391a:	e002      	b.n	8003922 <_HandleIncomingPacket+0xce>
      break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <_HandleIncomingPacket+0xce>
      break;
 8003920:	bf00      	nop
    }
  }
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20014338 	.word	0x20014338

08003930 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003936:	2301      	movs	r3, #1
 8003938:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	3301      	adds	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800394a:	e00b      	b.n	8003964 <_TrySendOverflowPacket+0x34>
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003956:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	09db      	lsrs	r3, r3, #7
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	2b7f      	cmp	r3, #127	@ 0x7f
 8003968:	d8f0      	bhi.n	800394c <_TrySendOverflowPacket+0x1c>
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800397a:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <_TrySendOverflowPacket+0xe0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003980:	4b22      	ldr	r3, [pc, #136]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	e00b      	b.n	80039ac <_TrySendOverflowPacket+0x7c>
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	6279      	str	r1, [r7, #36]	@ 0x24
 800399e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	09db      	lsrs	r3, r3, #7
 80039aa:	623b      	str	r3, [r7, #32]
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80039b0:	d8f0      	bhi.n	8003994 <_TrySendOverflowPacket+0x64>
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	4618      	mov	r0, r3
 80039c8:	1d3b      	adds	r3, r7, #4
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fc fbfc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80039d8:	4603      	mov	r3, r0
 80039da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80039e2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e004      	b.n	8003a00 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80039f6:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	3301      	adds	r3, #1
 80039fc:	4a03      	ldr	r2, [pc, #12]	@ (8003a0c <_TrySendOverflowPacket+0xdc>)
 80039fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003a00:	693b      	ldr	r3, [r7, #16]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3730      	adds	r7, #48	@ 0x30
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20014338 	.word	0x20014338
 8003a10:	e0001004 	.word	0xe0001004

08003a14 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003a20:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d010      	beq.n	8003a4a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a28:	4b69      	ldr	r3, [pc, #420]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a2 	beq.w	8003b76 <_SendPacket+0x162>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003a32:	4b67      	ldr	r3, [pc, #412]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d109      	bne.n	8003a4e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003a3a:	f7ff ff79 	bl	8003930 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003a3e:	4b64      	ldr	r3, [pc, #400]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	f040 8099 	bne.w	8003b7a <_SendPacket+0x166>
      goto SendDone;
    }
  }
Send:
 8003a48:	e001      	b.n	8003a4e <_SendPacket+0x3a>
    goto Send;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <_SendPacket+0x3c>
Send:
 8003a4e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b1f      	cmp	r3, #31
 8003a54:	d809      	bhi.n	8003a6a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003a56:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 808a 	bne.w	8003b7e <_SendPacket+0x16a>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b17      	cmp	r3, #23
 8003a6e:	d807      	bhi.n	8003a80 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e03d      	b.n	8003afc <_SendPacket+0xe8>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a8c:	d912      	bls.n	8003ab4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	09da      	lsrs	r2, r3, #7
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	60fa      	str	r2, [r7, #12]
 8003aa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e006      	b.n	8003ac2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
        *--pStartPacket = (U8)(EventId | 0x80);
      }
    }
#else
    if (EventId > 127) {
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ac6:	d912      	bls.n	8003aee <_SendPacket+0xda>
      *--pStartPacket = (U8)(EventId >> 7);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	09da      	lsrs	r2, r3, #7
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(EventId | 0x80);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	60fa      	str	r2, [r7, #12]
 8003ae2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e006      	b.n	8003afc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = (U8)EventId;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003afc:	4b35      	ldr	r3, [pc, #212]	@ (8003bd4 <_SendPacket+0x1c0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b02:	4b33      	ldr	r3, [pc, #204]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	e00b      	b.n	8003b2e <_SendPacket+0x11a>
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	6279      	str	r1, [r7, #36]	@ 0x24
 8003b20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	09db      	lsrs	r3, r3, #7
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b32:	d8f0      	bhi.n	8003b16 <_SendPacket+0x102>
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003b44:	4b22      	ldr	r3, [pc, #136]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	f7fc fb3c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003b58:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <_SendPacket+0x154>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b60:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	60d3      	str	r3, [r2, #12]
 8003b66:	e00b      	b.n	8003b80 <_SendPacket+0x16c>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b17      	ldr	r3, [pc, #92]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e004      	b.n	8003b80 <_SendPacket+0x16c>
    goto SendDone;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <_SendPacket+0x16c>
      goto SendDone;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <_SendPacket+0x16c>
      goto SendDone;
 8003b7e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003b80:	4b13      	ldr	r3, [pc, #76]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
 8003b84:	4619      	mov	r1, r3
 8003b86:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <_SendPacket+0x1c4>)
 8003b88:	460b      	mov	r3, r1
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	440b      	add	r3, r1
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	336c      	adds	r3, #108	@ 0x6c
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003b98:	7e1b      	ldrb	r3, [r3, #24]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	490e      	ldr	r1, [pc, #56]	@ (8003bd8 <_SendPacket+0x1c4>)
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4403      	add	r3, r0
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3370      	adds	r3, #112	@ 0x70
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d00b      	beq.n	8003bc8 <_SendPacket+0x1b4>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003bb0:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003bb2:	789b      	ldrb	r3, [r3, #2]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <_SendPacket+0x1b4>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003bbe:	f7ff fe49 	bl	8003854 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003bc2:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <_SendPacket+0x1bc>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003bc8:	bf00      	nop
 8003bca:	3728      	adds	r7, #40	@ 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20014338 	.word	0x20014338
 8003bd4:	e0001004 	.word	0xe0001004
 8003bd8:	20012e78 	.word	0x20012e78

08003bdc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	2b80      	cmp	r3, #128	@ 0x80
 8003bf4:	d80a      	bhi.n	8003c0c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6051      	str	r1, [r2, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b80      	cmp	r3, #128	@ 0x80
 8003c12:	d15a      	bne.n	8003cca <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	e00b      	b.n	8003c4e <_StoreChar+0x72>
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	1c59      	adds	r1, r3, #1
 8003c3e:	6279      	str	r1, [r7, #36]	@ 0x24
 8003c40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c52:	d8f0      	bhi.n	8003c36 <_StoreChar+0x5a>
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c5a:	6a3a      	ldr	r2, [r7, #32]
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e00b      	b.n	8003c86 <_StoreChar+0xaa>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	61f9      	str	r1, [r7, #28]
 8003c78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c8a:	d8f0      	bhi.n	8003c6e <_StoreChar+0x92>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	221a      	movs	r2, #26
 8003ca2:	6939      	ldr	r1, [r7, #16]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff feb5 	bl	8003a14 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fdc4 	bl	800383c <_PreparePacket>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3728      	adds	r7, #40	@ 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	@ 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003cea:	2301      	movs	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003cee:	e007      	b.n	8003d00 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	623b      	str	r3, [r7, #32]
    Width++;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d2f3      	bcs.n	8003cf0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d901      	bls.n	8003d14 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d000      	beq.n	8003d20 <_PrintUnsigned+0x4c>
 8003d1e:	e01f      	b.n	8003d60 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01c      	beq.n	8003d60 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <_PrintUnsigned+0x68>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <_PrintUnsigned+0x68>
        c = '0';
 8003d36:	2330      	movs	r3, #48	@ 0x30
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e001      	b.n	8003d40 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d40:	e007      	b.n	8003d52 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	3b01      	subs	r3, #1
 8003d46:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003d48:	7efb      	ldrb	r3, [r7, #27]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff ff45 	bl	8003bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <_PrintUnsigned+0x8c>
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3f0      	bcc.n	8003d42 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d903      	bls.n	8003d6e <_PrintUnsigned+0x9a>
      NumDigits--;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	e009      	b.n	8003d82 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d200      	bcs.n	8003d82 <_PrintUnsigned+0xae>
        break;
 8003d80:	e005      	b.n	8003d8e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003d8c:	e7e8      	b.n	8003d60 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003da6:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <_PrintUnsigned+0x128>)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff ff13 	bl	8003bdc <_StoreChar>
    Digit /= Base;
 8003db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d011      	beq.n	8003df4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003dd6:	e006      	b.n	8003de6 <_PrintUnsigned+0x112>
        FieldWidth--;
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8003dde:	2120      	movs	r1, #32
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fefb 	bl	8003bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <_PrintUnsigned+0x120>
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3f1      	bcc.n	8003dd8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8003df4:	bf00      	nop
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	08007280 	.word	0x08007280

08003e00 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bfb8      	it	lt
 8003e14:	425b      	neglt	r3, r3
 8003e16:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003e1c:	e007      	b.n	8003e2e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e26:	613b      	str	r3, [r7, #16]
    Width++;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	daf3      	bge.n	8003e1e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d901      	bls.n	8003e42 <_PrintInt+0x42>
    Width = NumDigits;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <_PrintInt+0x5e>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db04      	blt.n	8003e58 <_PrintInt+0x58>
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <_PrintInt+0x5e>
    FieldWidth--;
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <_PrintInt+0x6e>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <_PrintInt+0x9c>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00e      	beq.n	8003e9c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e7e:	e006      	b.n	8003e8e <_PrintInt+0x8e>
        FieldWidth--;
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003e86:	2120      	movs	r1, #32
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff fea7 	bl	8003bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <_PrintInt+0x9c>
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3f1      	bcc.n	8003e80 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da07      	bge.n	8003eb2 <_PrintInt+0xb2>
    v = -v;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003ea8:	212d      	movs	r1, #45	@ 0x2d
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff fe96 	bl	8003bdc <_StoreChar>
 8003eb0:	e008      	b.n	8003ec4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003ebc:	212b      	movs	r1, #43	@ 0x2b
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fe8c 	bl	8003bdc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d019      	beq.n	8003f02 <_PrintInt+0x102>
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d114      	bne.n	8003f02 <_PrintInt+0x102>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d111      	bne.n	8003f02 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ee4:	e006      	b.n	8003ef4 <_PrintInt+0xf4>
        FieldWidth--;
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003eec:	2130      	movs	r1, #48	@ 0x30
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fe74 	bl	8003bdc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <_PrintInt+0x102>
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3f1      	bcc.n	8003ee6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff fedf 	bl	8003cd4 <_PrintUnsigned>
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b098      	sub	sp, #96	@ 0x60
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f30:	f04f 0120 	mov.w	r1, #32
 8003f34:	f381 8811 	msr	BASEPRI, r1
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f3a:	48b7      	ldr	r0, [pc, #732]	@ (8004218 <_VPrintTarget+0x2f8>)
 8003f3c:	f7ff fc7e 	bl	800383c <_PreparePacket>
 8003f40:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003f42:	4bb5      	ldr	r3, [pc, #724]	@ (8004218 <_VPrintTarget+0x2f8>)
 8003f44:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003f66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 81a8 	beq.w	80042c0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8003f70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003f74:	2b25      	cmp	r3, #37	@ 0x25
 8003f76:	f040 8195 	bne.w	80042a4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8003f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003f8e:	3b23      	subs	r3, #35	@ 0x23
 8003f90:	2b0d      	cmp	r3, #13
 8003f92:	d83f      	bhi.n	8004014 <_VPrintTarget+0xf4>
 8003f94:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <_VPrintTarget+0x7c>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08004005 	.word	0x08004005
 8003fa0:	08004015 	.word	0x08004015
 8003fa4:	08004015 	.word	0x08004015
 8003fa8:	08004015 	.word	0x08004015
 8003fac:	08004015 	.word	0x08004015
 8003fb0:	08004015 	.word	0x08004015
 8003fb4:	08004015 	.word	0x08004015
 8003fb8:	08004015 	.word	0x08004015
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08004015 	.word	0x08004015
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08004015 	.word	0x08004015
 8003fcc:	08004015 	.word	0x08004015
 8003fd0:	08003fe5 	.word	0x08003fe5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e01a      	b.n	800401a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e012      	b.n	800401a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e00a      	b.n	800401a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004006:	f043 0308 	orr.w	r3, r3, #8
 800400a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e002      	b.n	800401a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004014:	2300      	movs	r3, #0
 8004016:	653b      	str	r3, [r7, #80]	@ 0x50
 8004018:	bf00      	nop
        }
      } while (v);
 800401a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1b0      	bne.n	8003f82 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004020:	2300      	movs	r3, #0
 8004022:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800402c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004030:	2b2f      	cmp	r3, #47	@ 0x2f
 8004032:	d912      	bls.n	800405a <_VPrintTarget+0x13a>
 8004034:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004038:	2b39      	cmp	r3, #57	@ 0x39
 800403a:	d80e      	bhi.n	800405a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	461a      	mov	r2, r3
 800404e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004052:	4413      	add	r3, r2
 8004054:	3b30      	subs	r3, #48	@ 0x30
 8004056:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004058:	e7e4      	b.n	8004024 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800405a:	2300      	movs	r3, #0
 800405c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004066:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800406a:	2b2e      	cmp	r3, #46	@ 0x2e
 800406c:	d11d      	bne.n	80040aa <_VPrintTarget+0x18a>
        sFormat++;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3301      	adds	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800407c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004080:	2b2f      	cmp	r3, #47	@ 0x2f
 8004082:	d912      	bls.n	80040aa <_VPrintTarget+0x18a>
 8004084:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004088:	2b39      	cmp	r3, #57	@ 0x39
 800408a:	d80e      	bhi.n	80040aa <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004092:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	461a      	mov	r2, r3
 800409e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040a2:	4413      	add	r3, r2
 80040a4:	3b30      	subs	r3, #48	@ 0x30
 80040a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80040a8:	e7e4      	b.n	8004074 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80040b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040b6:	2b6c      	cmp	r3, #108	@ 0x6c
 80040b8:	d003      	beq.n	80040c2 <_VPrintTarget+0x1a2>
 80040ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040be:	2b68      	cmp	r3, #104	@ 0x68
 80040c0:	d107      	bne.n	80040d2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80040d0:	e7ef      	b.n	80040b2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80040d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80040d6:	2b25      	cmp	r3, #37	@ 0x25
 80040d8:	f000 80d8 	beq.w	800428c <_VPrintTarget+0x36c>
 80040dc:	2b25      	cmp	r3, #37	@ 0x25
 80040de:	f2c0 80dc 	blt.w	800429a <_VPrintTarget+0x37a>
 80040e2:	2b78      	cmp	r3, #120	@ 0x78
 80040e4:	f300 80d9 	bgt.w	800429a <_VPrintTarget+0x37a>
 80040e8:	2b58      	cmp	r3, #88	@ 0x58
 80040ea:	f2c0 80d6 	blt.w	800429a <_VPrintTarget+0x37a>
 80040ee:	3b58      	subs	r3, #88	@ 0x58
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	f200 80d2 	bhi.w	800429a <_VPrintTarget+0x37a>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <_VPrintTarget+0x1dc>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	080041f3 	.word	0x080041f3
 8004100:	0800429b 	.word	0x0800429b
 8004104:	0800429b 	.word	0x0800429b
 8004108:	0800429b 	.word	0x0800429b
 800410c:	0800429b 	.word	0x0800429b
 8004110:	0800429b 	.word	0x0800429b
 8004114:	0800429b 	.word	0x0800429b
 8004118:	0800429b 	.word	0x0800429b
 800411c:	0800429b 	.word	0x0800429b
 8004120:	0800429b 	.word	0x0800429b
 8004124:	0800429b 	.word	0x0800429b
 8004128:	08004181 	.word	0x08004181
 800412c:	080041a7 	.word	0x080041a7
 8004130:	0800429b 	.word	0x0800429b
 8004134:	0800429b 	.word	0x0800429b
 8004138:	0800429b 	.word	0x0800429b
 800413c:	0800429b 	.word	0x0800429b
 8004140:	0800429b 	.word	0x0800429b
 8004144:	0800429b 	.word	0x0800429b
 8004148:	0800429b 	.word	0x0800429b
 800414c:	0800429b 	.word	0x0800429b
 8004150:	0800429b 	.word	0x0800429b
 8004154:	0800429b 	.word	0x0800429b
 8004158:	0800429b 	.word	0x0800429b
 800415c:	08004267 	.word	0x08004267
 8004160:	0800429b 	.word	0x0800429b
 8004164:	0800429b 	.word	0x0800429b
 8004168:	0800421d 	.word	0x0800421d
 800416c:	0800429b 	.word	0x0800429b
 8004170:	080041cd 	.word	0x080041cd
 8004174:	0800429b 	.word	0x0800429b
 8004178:	0800429b 	.word	0x0800429b
 800417c:	080041f3 	.word	0x080041f3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	1d19      	adds	r1, r3, #4
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800418e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004194:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004198:	f107 0310 	add.w	r3, r7, #16
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fd1c 	bl	8003bdc <_StoreChar>
        break;
 80041a4:	e07a      	b.n	800429c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	1d19      	adds	r1, r3, #4
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6011      	str	r1, [r2, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80041b4:	f107 0010 	add.w	r0, r7, #16
 80041b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c2:	220a      	movs	r2, #10
 80041c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80041c6:	f7ff fe1b 	bl	8003e00 <_PrintInt>
        break;
 80041ca:	e067      	b.n	800429c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1d19      	adds	r1, r3, #4
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6011      	str	r1, [r2, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80041da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80041dc:	f107 0010 	add.w	r0, r7, #16
 80041e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ea:	220a      	movs	r2, #10
 80041ec:	f7ff fd72 	bl	8003cd4 <_PrintUnsigned>
        break;
 80041f0:	e054      	b.n	800429c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	1d19      	adds	r1, r3, #4
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6011      	str	r1, [r2, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004200:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004202:	f107 0010 	add.w	r0, r7, #16
 8004206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004210:	2210      	movs	r2, #16
 8004212:	f7ff fd5f 	bl	8003cd4 <_PrintUnsigned>
        break;
 8004216:	e041      	b.n	800429c <_VPrintTarget+0x37c>
 8004218:	20014368 	.word	0x20014368
      case 's':
        s = va_arg(*pParamList, const char*);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1d19      	adds	r1, r3, #4
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800422a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <_VPrintTarget+0x314>
          s = "(null)";
 8004230:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <_VPrintTarget+0x43c>)
 8004232:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 800423c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800423e:	3301      	adds	r3, #1
 8004240:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004242:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800424a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fcc1 	bl	8003bdc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2b7f      	cmp	r3, #127	@ 0x7f
 800425e:	d9e9      	bls.n	8004234 <_VPrintTarget+0x314>
        break;
 8004260:	e01c      	b.n	800429c <_VPrintTarget+0x37c>
            break;
 8004262:	bf00      	nop
        break;
 8004264:	e01a      	b.n	800429c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1d19      	adds	r1, r3, #4
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6011      	str	r1, [r2, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004274:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004276:	f107 0010 	add.w	r0, r7, #16
 800427a:	2300      	movs	r3, #0
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2308      	movs	r3, #8
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2308      	movs	r3, #8
 8004284:	2210      	movs	r2, #16
 8004286:	f7ff fd25 	bl	8003cd4 <_PrintUnsigned>
        break;
 800428a:	e007      	b.n	800429c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	2125      	movs	r1, #37	@ 0x25
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fca2 	bl	8003bdc <_StoreChar>
        break;
 8004298:	e000      	b.n	800429c <_VPrintTarget+0x37c>
      default:
        break;
 800429a:	bf00      	nop
      }
      sFormat++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e007      	b.n	80042b4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80042a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80042a8:	f107 0310 	add.w	r3, r7, #16
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fc94 	bl	8003bdc <_StoreChar>
    }
  } while (*sFormat);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f ae4d 	bne.w	8003f58 <_VPrintTarget+0x38>
 80042be:	e000      	b.n	80042c2 <_VPrintTarget+0x3a2>
      break;
 80042c0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d041      	beq.n	800434c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80042c8:	6a3a      	ldr	r2, [r7, #32]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042d8:	e00b      	b.n	80042f2 <_VPrintTarget+0x3d2>
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80042e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	09db      	lsrs	r3, r3, #7
 80042f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042f6:	d8f0      	bhi.n	80042da <_VPrintTarget+0x3ba>
 80042f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004310:	e00b      	b.n	800432a <_VPrintTarget+0x40a>
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	b2da      	uxtb	r2, r3
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	1c59      	adds	r1, r3, #1
 800431a:	6379      	str	r1, [r7, #52]	@ 0x34
 800431c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004326:	09db      	lsrs	r3, r3, #7
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	2b7f      	cmp	r3, #127	@ 0x7f
 800432e:	d8f0      	bhi.n	8004312 <_VPrintTarget+0x3f2>
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	637a      	str	r2, [r7, #52]	@ 0x34
 8004336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	6979      	ldr	r1, [r7, #20]
 8004344:	221a      	movs	r2, #26
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fb64 	bl	8003a14 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800434c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004352:	bf00      	nop
 8004354:	3758      	adds	r7, #88	@ 0x58
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	0800718c 	.word	0x0800718c

08004360 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800436e:	2300      	movs	r3, #0
 8004370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004374:	4917      	ldr	r1, [pc, #92]	@ (80043d4 <SEGGER_SYSVIEW_Init+0x74>)
 8004376:	4818      	ldr	r0, [pc, #96]	@ (80043d8 <SEGGER_SYSVIEW_Init+0x78>)
 8004378:	f7ff f960 	bl	800363c <SEGGER_RTT_AllocUpBuffer>
 800437c:	4603      	mov	r3, r0
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b16      	ldr	r3, [pc, #88]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 8004382:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004384:	4b15      	ldr	r3, [pc, #84]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 8004386:	785a      	ldrb	r2, [r3, #1]
 8004388:	4b14      	ldr	r3, [pc, #80]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 800438a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800438c:	4b13      	ldr	r3, [pc, #76]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 800438e:	7e1b      	ldrb	r3, [r3, #24]
 8004390:	4618      	mov	r0, r3
 8004392:	2300      	movs	r3, #0
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	2308      	movs	r3, #8
 8004398:	4a11      	ldr	r2, [pc, #68]	@ (80043e0 <SEGGER_SYSVIEW_Init+0x80>)
 800439a:	490f      	ldr	r1, [pc, #60]	@ (80043d8 <SEGGER_SYSVIEW_Init+0x78>)
 800439c:	f7ff f9d2 	bl	8003744 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80043a0:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043a6:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <SEGGER_SYSVIEW_Init+0x84>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a0c      	ldr	r2, [pc, #48]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043ac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80043ae:	4a0b      	ldr	r2, [pc, #44]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80043b4:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80043ba:	4a08      	ldr	r2, [pc, #32]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80043c0:	4a06      	ldr	r2, [pc, #24]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <SEGGER_SYSVIEW_Init+0x7c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20013330 	.word	0x20013330
 80043d8:	08007194 	.word	0x08007194
 80043dc:	20014338 	.word	0x20014338
 80043e0:	20014330 	.word	0x20014330
 80043e4:	e0001004 	.word	0xe0001004

080043e8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80043f0:	4a04      	ldr	r2, [pc, #16]	@ (8004404 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6113      	str	r3, [r2, #16]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20014338 	.word	0x20014338

08004408 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004410:	f3ef 8311 	mrs	r3, BASEPRI
 8004414:	f04f 0120 	mov.w	r1, #32
 8004418:	f381 8811 	msr	BASEPRI, r1
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4808      	ldr	r0, [pc, #32]	@ (8004440 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004420:	f7ff fa0c 	bl	800383c <_PreparePacket>
 8004424:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68b8      	ldr	r0, [r7, #8]
 800442c:	f7ff faf2 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f383 8811 	msr	BASEPRI, r3
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20014368 	.word	0x20014368

08004444 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800444e:	f3ef 8311 	mrs	r3, BASEPRI
 8004452:	f04f 0120 	mov.w	r1, #32
 8004456:	f381 8811 	msr	BASEPRI, r1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	4816      	ldr	r0, [pc, #88]	@ (80044b8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800445e:	f7ff f9ed 	bl	800383c <_PreparePacket>
 8004462:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	e00b      	b.n	800448a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	1c59      	adds	r1, r3, #1
 800447a:	61f9      	str	r1, [r7, #28]
 800447c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	09db      	lsrs	r3, r3, #7
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b7f      	cmp	r3, #127	@ 0x7f
 800448e:	d8f0      	bhi.n	8004472 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	6938      	ldr	r0, [r7, #16]
 80044a6:	f7ff fab5 	bl	8003a14 <_SendPacket>
  RECORD_END();
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f383 8811 	msr	BASEPRI, r3
}
 80044b0:	bf00      	nop
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20014368 	.word	0x20014368

080044bc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08c      	sub	sp, #48	@ 0x30
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044c8:	f3ef 8311 	mrs	r3, BASEPRI
 80044cc:	f04f 0120 	mov.w	r1, #32
 80044d0:	f381 8811 	msr	BASEPRI, r1
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	4825      	ldr	r0, [pc, #148]	@ (800456c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80044d8:	f7ff f9b0 	bl	800383c <_PreparePacket>
 80044dc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ea:	e00b      	b.n	8004504 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80044ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80044f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	09db      	lsrs	r3, r3, #7
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	2b7f      	cmp	r3, #127	@ 0x7f
 8004508:	d8f0      	bhi.n	80044ec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004518:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e00b      	b.n	800453c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	6279      	str	r1, [r7, #36]	@ 0x24
 800452e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	09db      	lsrs	r3, r3, #7
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004540:	d8f0      	bhi.n	8004524 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	627a      	str	r2, [r7, #36]	@ 0x24
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	69b8      	ldr	r0, [r7, #24]
 8004558:	f7ff fa5c 	bl	8003a14 <_SendPacket>
  RECORD_END();
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f383 8811 	msr	BASEPRI, r3
}
 8004562:	bf00      	nop
 8004564:	3730      	adds	r7, #48	@ 0x30
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20014368 	.word	0x20014368

08004570 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	@ 0x38
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800457e:	f3ef 8311 	mrs	r3, BASEPRI
 8004582:	f04f 0120 	mov.w	r1, #32
 8004586:	f381 8811 	msr	BASEPRI, r1
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	4832      	ldr	r0, [pc, #200]	@ (8004658 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800458e:	f7ff f955 	bl	800383c <_PreparePacket>
 8004592:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30
 80045a0:	e00b      	b.n	80045ba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a8:	1c59      	adds	r1, r3, #1
 80045aa:	6379      	str	r1, [r7, #52]	@ 0x34
 80045ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	09db      	lsrs	r3, r3, #7
 80045b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80045be:	d8f0      	bhi.n	80045a2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80045c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80045c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d8:	e00b      	b.n	80045f2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e0:	1c59      	adds	r1, r3, #1
 80045e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80045e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	09db      	lsrs	r3, r3, #7
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80045f6:	d8f0      	bhi.n	80045da <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80045f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004606:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	e00b      	b.n	800462a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	6279      	str	r1, [r7, #36]	@ 0x24
 800461c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	09db      	lsrs	r3, r3, #7
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b7f      	cmp	r3, #127	@ 0x7f
 800462e:	d8f0      	bhi.n	8004612 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	627a      	str	r2, [r7, #36]	@ 0x24
 8004636:	6a3a      	ldr	r2, [r7, #32]
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	69b8      	ldr	r0, [r7, #24]
 8004646:	f7ff f9e5 	bl	8003a14 <_SendPacket>
  RECORD_END();
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f383 8811 	msr	BASEPRI, r3
}
 8004650:	bf00      	nop
 8004652:	3738      	adds	r7, #56	@ 0x38
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20014368 	.word	0x20014368

0800465c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b090      	sub	sp, #64	@ 0x40
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800466a:	f3ef 8311 	mrs	r3, BASEPRI
 800466e:	f04f 0120 	mov.w	r1, #32
 8004672:	f381 8811 	msr	BASEPRI, r1
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	4840      	ldr	r0, [pc, #256]	@ (800477c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800467a:	f7ff f8df 	bl	800383c <_PreparePacket>
 800467e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800468c:	e00b      	b.n	80046a6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800468e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004698:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a2:	09db      	lsrs	r3, r3, #7
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80046aa:	d8f0      	bhi.n	800468e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80046ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c4:	e00b      	b.n	80046de <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046cc:	1c59      	adds	r1, r3, #1
 80046ce:	6379      	str	r1, [r7, #52]	@ 0x34
 80046d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	09db      	lsrs	r3, r3, #7
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80046e2:	d8f0      	bhi.n	80046c6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80046ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fc:	e00b      	b.n	8004716 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	b2da      	uxtb	r2, r3
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004708:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2b7f      	cmp	r3, #127	@ 0x7f
 800471a:	d8f0      	bhi.n	80046fe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800472a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	e00b      	b.n	800474e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	1c59      	adds	r1, r3, #1
 800473e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004740:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	09db      	lsrs	r3, r3, #7
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2b7f      	cmp	r3, #127	@ 0x7f
 8004752:	d8f0      	bhi.n	8004736 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	627a      	str	r2, [r7, #36]	@ 0x24
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	6979      	ldr	r1, [r7, #20]
 8004768:	69b8      	ldr	r0, [r7, #24]
 800476a:	f7ff f953 	bl	8003a14 <_SendPacket>
  RECORD_END();
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f383 8811 	msr	BASEPRI, r3
}
 8004774:	bf00      	nop
 8004776:	3740      	adds	r7, #64	@ 0x40
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20014368 	.word	0x20014368

08004780 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	@ 0x30
 8004784:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004786:	4b58      	ldr	r3, [pc, #352]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 8004788:	2201      	movs	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800478c:	f3ef 8311 	mrs	r3, BASEPRI
 8004790:	f04f 0120 	mov.w	r1, #32
 8004794:	f381 8811 	msr	BASEPRI, r1
 8004798:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800479a:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	220a      	movs	r2, #10
 80047a0:	4952      	ldr	r1, [pc, #328]	@ (80048ec <SEGGER_SYSVIEW_Start+0x16c>)
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fb fd14 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80047ae:	200a      	movs	r0, #10
 80047b0:	f7ff fe2a 	bl	8004408 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047b4:	f3ef 8311 	mrs	r3, BASEPRI
 80047b8:	f04f 0120 	mov.w	r1, #32
 80047bc:	f381 8811 	msr	BASEPRI, r1
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	484b      	ldr	r0, [pc, #300]	@ (80048f0 <SEGGER_SYSVIEW_Start+0x170>)
 80047c4:	f7ff f83a 	bl	800383c <_PreparePacket>
 80047c8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	4b45      	ldr	r3, [pc, #276]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d8:	e00b      	b.n	80047f2 <SEGGER_SYSVIEW_Start+0x72>
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	1c59      	adds	r1, r3, #1
 80047e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80047e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	09db      	lsrs	r3, r3, #7
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80047f6:	d8f0      	bhi.n	80047da <SEGGER_SYSVIEW_Start+0x5a>
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004806:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	627b      	str	r3, [r7, #36]	@ 0x24
 800480c:	4b36      	ldr	r3, [pc, #216]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	623b      	str	r3, [r7, #32]
 8004812:	e00b      	b.n	800482c <SEGGER_SYSVIEW_Start+0xac>
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	6279      	str	r1, [r7, #36]	@ 0x24
 800481e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	09db      	lsrs	r3, r3, #7
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004830:	d8f0      	bhi.n	8004814 <SEGGER_SYSVIEW_Start+0x94>
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	627a      	str	r2, [r7, #36]	@ 0x24
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	4b28      	ldr	r3, [pc, #160]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e00b      	b.n	8004866 <SEGGER_SYSVIEW_Start+0xe6>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	1c59      	adds	r1, r3, #1
 8004856:	61f9      	str	r1, [r7, #28]
 8004858:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	09db      	lsrs	r3, r3, #7
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b7f      	cmp	r3, #127	@ 0x7f
 800486a:	d8f0      	bhi.n	800484e <SEGGER_SYSVIEW_Start+0xce>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	61fa      	str	r2, [r7, #28]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	e00b      	b.n	800489e <SEGGER_SYSVIEW_Start+0x11e>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	1c59      	adds	r1, r3, #1
 800488e:	6179      	str	r1, [r7, #20]
 8004890:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	09db      	lsrs	r3, r3, #7
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048a2:	d8f0      	bhi.n	8004886 <SEGGER_SYSVIEW_Start+0x106>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	617a      	str	r2, [r7, #20]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80048b4:	2218      	movs	r2, #24
 80048b6:	6839      	ldr	r1, [r7, #0]
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff f8ab 	bl	8003a14 <_SendPacket>
      RECORD_END();
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048c4:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <SEGGER_SYSVIEW_Start+0x168>)
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80048d2:	f000 f9eb 	bl	8004cac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80048d6:	f000 f9b1 	bl	8004c3c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80048da:	f000 fc2d 	bl	8005138 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80048de:	bf00      	nop
 80048e0:	3730      	adds	r7, #48	@ 0x30
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20014338 	.word	0x20014338
 80048ec:	08007274 	.word	0x08007274
 80048f0:	20014368 	.word	0x20014368

080048f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048fa:	f3ef 8311 	mrs	r3, BASEPRI
 80048fe:	f04f 0120 	mov.w	r1, #32
 8004902:	f381 8811 	msr	BASEPRI, r1
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	480b      	ldr	r0, [pc, #44]	@ (8004938 <SEGGER_SYSVIEW_Stop+0x44>)
 800490a:	f7fe ff97 	bl	800383c <_PreparePacket>
 800490e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004910:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <SEGGER_SYSVIEW_Stop+0x48>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004918:	220b      	movs	r2, #11
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	6838      	ldr	r0, [r7, #0]
 800491e:	f7ff f879 	bl	8003a14 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004922:	4b06      	ldr	r3, [pc, #24]	@ (800493c <SEGGER_SYSVIEW_Stop+0x48>)
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f383 8811 	msr	BASEPRI, r3
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20014368 	.word	0x20014368
 800493c:	20014338 	.word	0x20014338

08004940 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	@ 0x30
 8004944:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004946:	f3ef 8311 	mrs	r3, BASEPRI
 800494a:	f04f 0120 	mov.w	r1, #32
 800494e:	f381 8811 	msr	BASEPRI, r1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	4845      	ldr	r0, [pc, #276]	@ (8004a6c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004956:	f7fe ff71 	bl	800383c <_PreparePacket>
 800495a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004964:	4b42      	ldr	r3, [pc, #264]	@ (8004a70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496a:	e00b      	b.n	8004984 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004976:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004980:	09db      	lsrs	r3, r3, #7
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	2b7f      	cmp	r3, #127	@ 0x7f
 8004988:	d8f0      	bhi.n	800496c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800498a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
 800499e:	4b34      	ldr	r3, [pc, #208]	@ (8004a70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	e00b      	b.n	80049be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80049b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	09db      	lsrs	r3, r3, #7
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80049c2:	d8f0      	bhi.n	80049a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e00b      	b.n	80049f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	61f9      	str	r1, [r7, #28]
 80049ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	09db      	lsrs	r3, r3, #7
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80049fc:	d8f0      	bhi.n	80049e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	61fa      	str	r2, [r7, #28]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e00b      	b.n	8004a30 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1c59      	adds	r1, r3, #1
 8004a20:	6179      	str	r1, [r7, #20]
 8004a22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	09db      	lsrs	r3, r3, #7
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a34:	d8f0      	bhi.n	8004a18 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	617a      	str	r2, [r7, #20]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a46:	2218      	movs	r2, #24
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f7fe ffe2 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a56:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	4798      	blx	r3
  }
}
 8004a64:	bf00      	nop
 8004a66:	3730      	adds	r7, #48	@ 0x30
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20014368 	.word	0x20014368
 8004a70:	20014338 	.word	0x20014338

08004a74 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b092      	sub	sp, #72	@ 0x48
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a80:	f04f 0120 	mov.w	r1, #32
 8004a84:	f381 8811 	msr	BASEPRI, r1
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	486a      	ldr	r0, [pc, #424]	@ (8004c34 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a8c:	f7fe fed6 	bl	800383c <_PreparePacket>
 8004a90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b66      	ldr	r3, [pc, #408]	@ (8004c38 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa6:	e00b      	b.n	8004ac0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	6479      	str	r1, [r7, #68]	@ 0x44
 8004ab2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004abc:	09db      	lsrs	r3, r3, #7
 8004abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ac4:	d8f0      	bhi.n	8004aa8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8004acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ae0:	e00b      	b.n	8004afa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004aec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af6:	09db      	lsrs	r3, r3, #7
 8004af8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004afe:	d8f0      	bhi.n	8004ae2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	4619      	mov	r1, r3
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7fe fe5f 	bl	80037dc <_EncodeStr>
 8004b1e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004b20:	2209      	movs	r2, #9
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6938      	ldr	r0, [r7, #16]
 8004b26:	f7fe ff75 	bl	8003a14 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b40      	ldr	r3, [pc, #256]	@ (8004c38 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b3e:	e00b      	b.n	8004b58 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	6379      	str	r1, [r7, #52]	@ 0x34
 8004b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	09db      	lsrs	r3, r3, #7
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5c:	d8f0      	bhi.n	8004b40 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b78:	e00b      	b.n	8004b92 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	1c59      	adds	r1, r3, #1
 8004b82:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004b84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	09db      	lsrs	r3, r3, #7
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b96:	d8f0      	bhi.n	8004b7a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	e00b      	b.n	8004bcc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	09db      	lsrs	r3, r3, #7
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bd0:	d8f0      	bhi.n	8004bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bd8:	6a3a      	ldr	r2, [r7, #32]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e00b      	b.n	8004c06 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	61f9      	str	r1, [r7, #28]
 8004bf8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	09db      	lsrs	r3, r3, #7
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c0a:	d8f0      	bhi.n	8004bee <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	61fa      	str	r2, [r7, #28]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004c1c:	2215      	movs	r2, #21
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	6938      	ldr	r0, [r7, #16]
 8004c22:	f7fe fef7 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f383 8811 	msr	BASEPRI, r3
}
 8004c2c:	bf00      	nop
 8004c2e:	3748      	adds	r7, #72	@ 0x48
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20014368 	.word	0x20014368
 8004c38:	20014338 	.word	0x20014338

08004c3c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004c52:	4b03      	ldr	r3, [pc, #12]	@ (8004c60 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4798      	blx	r3
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20014338 	.word	0x20014338

08004c64 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c70:	f04f 0120 	mov.w	r1, #32
 8004c74:	f381 8811 	msr	BASEPRI, r1
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	480b      	ldr	r0, [pc, #44]	@ (8004ca8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c7c:	f7fe fdde 	bl	800383c <_PreparePacket>
 8004c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c82:	2280      	movs	r2, #128	@ 0x80
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f7fe fda8 	bl	80037dc <_EncodeStr>
 8004c8c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c8e:	220e      	movs	r2, #14
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	6938      	ldr	r0, [r7, #16]
 8004c94:	f7fe febe 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20014368 	.word	0x20014368

08004cac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004cb2:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01a      	beq.n	8004cf0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004cba:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004cc4:	4b10      	ldr	r3, [pc, #64]	@ (8004d08 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4798      	blx	r3
 8004ccc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cd0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	000a      	movs	r2, r1
 8004ce0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	200d      	movs	r0, #13
 8004cea:	f7ff fbe7 	bl	80044bc <SEGGER_SYSVIEW_RecordU32x2>
 8004cee:	e006      	b.n	8004cfe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004cf0:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	200c      	movs	r0, #12
 8004cf8:	f7ff fba4 	bl	8004444 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20014338 	.word	0x20014338
 8004d0c:	e0001004 	.word	0xe0001004

08004d10 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d16:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1a:	f04f 0120 	mov.w	r1, #32
 8004d1e:	f381 8811 	msr	BASEPRI, r1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	4819      	ldr	r0, [pc, #100]	@ (8004d8c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004d26:	f7fe fd89 	bl	800383c <_PreparePacket>
 8004d2a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004d30:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d38:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e00b      	b.n	8004d5c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	6179      	str	r1, [r7, #20]
 8004d4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d60:	d8f0      	bhi.n	8004d44 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	617a      	str	r2, [r7, #20]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d72:	2202      	movs	r2, #2
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	68b8      	ldr	r0, [r7, #8]
 8004d78:	f7fe fe4c 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f383 8811 	msr	BASEPRI, r3
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20014368 	.word	0x20014368
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9e:	f04f 0120 	mov.w	r1, #32
 8004da2:	f381 8811 	msr	BASEPRI, r1
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	4807      	ldr	r0, [pc, #28]	@ (8004dc8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004daa:	f7fe fd47 	bl	800383c <_PreparePacket>
 8004dae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004db0:	2203      	movs	r2, #3
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	f7fe fe2d 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f383 8811 	msr	BASEPRI, r3
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20014368 	.word	0x20014368

08004dcc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd6:	f04f 0120 	mov.w	r1, #32
 8004dda:	f381 8811 	msr	BASEPRI, r1
 8004dde:	607b      	str	r3, [r7, #4]
 8004de0:	4807      	ldr	r0, [pc, #28]	@ (8004e00 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004de2:	f7fe fd2b 	bl	800383c <_PreparePacket>
 8004de6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004de8:	2212      	movs	r2, #18
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6838      	ldr	r0, [r7, #0]
 8004dee:	f7fe fe11 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f383 8811 	msr	BASEPRI, r3
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20014368 	.word	0x20014368

08004e04 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0e:	f04f 0120 	mov.w	r1, #32
 8004e12:	f381 8811 	msr	BASEPRI, r1
 8004e16:	607b      	str	r3, [r7, #4]
 8004e18:	4807      	ldr	r0, [pc, #28]	@ (8004e38 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004e1a:	f7fe fd0f 	bl	800383c <_PreparePacket>
 8004e1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004e20:	2211      	movs	r2, #17
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f7fe fdf5 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f383 8811 	msr	BASEPRI, r3
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20014368 	.word	0x20014368

08004e3c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e44:	f3ef 8311 	mrs	r3, BASEPRI
 8004e48:	f04f 0120 	mov.w	r1, #32
 8004e4c:	f381 8811 	msr	BASEPRI, r1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	4819      	ldr	r0, [pc, #100]	@ (8004eb8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004e54:	f7fe fcf2 	bl	800383c <_PreparePacket>
 8004e58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e5e:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e00b      	b.n	8004e8a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	1c59      	adds	r1, r3, #1
 8004e7a:	61f9      	str	r1, [r7, #28]
 8004e7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	09db      	lsrs	r3, r3, #7
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e8e:	d8f0      	bhi.n	8004e72 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	61fa      	str	r2, [r7, #28]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	6938      	ldr	r0, [r7, #16]
 8004ea6:	f7fe fdb5 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f383 8811 	msr	BASEPRI, r3
}
 8004eb0:	bf00      	nop
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20014368 	.word	0x20014368
 8004ebc:	20014338 	.word	0x20014338

08004ec0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ecc:	f04f 0120 	mov.w	r1, #32
 8004ed0:	f381 8811 	msr	BASEPRI, r1
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	4819      	ldr	r0, [pc, #100]	@ (8004f3c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ed8:	f7fe fcb0 	bl	800383c <_PreparePacket>
 8004edc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ee2:	4b17      	ldr	r3, [pc, #92]	@ (8004f40 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e00b      	b.n	8004f0e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	61f9      	str	r1, [r7, #28]
 8004f00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	09db      	lsrs	r3, r3, #7
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f12:	d8f0      	bhi.n	8004ef6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	61fa      	str	r2, [r7, #28]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004f24:	2204      	movs	r2, #4
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6938      	ldr	r0, [r7, #16]
 8004f2a:	f7fe fd73 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f383 8811 	msr	BASEPRI, r3
}
 8004f34:	bf00      	nop
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20014368 	.word	0x20014368
 8004f40:	20014338 	.word	0x20014338

08004f44 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f50:	f04f 0120 	mov.w	r1, #32
 8004f54:	f381 8811 	msr	BASEPRI, r1
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	4819      	ldr	r0, [pc, #100]	@ (8004fc0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004f5c:	f7fe fc6e 	bl	800383c <_PreparePacket>
 8004f60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f66:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e00b      	b.n	8004f92 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	61f9      	str	r1, [r7, #28]
 8004f84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f96:	d8f0      	bhi.n	8004f7a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004fa8:	2206      	movs	r2, #6
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	6938      	ldr	r0, [r7, #16]
 8004fae:	f7fe fd31 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f383 8811 	msr	BASEPRI, r3
}
 8004fb8:	bf00      	nop
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20014368 	.word	0x20014368
 8004fc4:	20014338 	.word	0x20014338

08004fc8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004fd0:	4b04      	ldr	r3, [pc, #16]	@ (8004fe4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	20014338 	.word	0x20014338

08004fe8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	@ 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004ff2:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d077      	beq.n	80050ea <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80050f4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005000:	2300      	movs	r3, #0
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005004:	e008      	b.n	8005018 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005014:	3301      	adds	r3, #1
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800501c:	429a      	cmp	r2, r3
 800501e:	d3f2      	bcc.n	8005006 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005020:	e000      	b.n	8005024 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005022:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d055      	beq.n	80050d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800502a:	f3ef 8311 	mrs	r3, BASEPRI
 800502e:	f04f 0120 	mov.w	r1, #32
 8005032:	f381 8811 	msr	BASEPRI, r1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	482f      	ldr	r0, [pc, #188]	@ (80050f8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800503a:	f7fe fbff 	bl	800383c <_PreparePacket>
 800503e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	e00b      	b.n	8005066 <SEGGER_SYSVIEW_SendModule+0x7e>
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	6279      	str	r1, [r7, #36]	@ 0x24
 8005058:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	09db      	lsrs	r3, r3, #7
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	2b7f      	cmp	r3, #127	@ 0x7f
 800506a:	d8f0      	bhi.n	800504e <SEGGER_SYSVIEW_SendModule+0x66>
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	627a      	str	r2, [r7, #36]	@ 0x24
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e00b      	b.n	80050a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1c59      	adds	r1, r3, #1
 8005090:	61f9      	str	r1, [r7, #28]
 8005092:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	09db      	lsrs	r3, r3, #7
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80050a4:	d8f0      	bhi.n	8005088 <SEGGER_SYSVIEW_SendModule+0xa0>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	61fa      	str	r2, [r7, #28]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	4619      	mov	r1, r3
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7fe fb8c 	bl	80037dc <_EncodeStr>
 80050c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80050c6:	2216      	movs	r2, #22
 80050c8:	68f9      	ldr	r1, [r7, #12]
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f7fe fca2 	bl	8003a14 <_SendPacket>
      RECORD_END();
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80050d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d006      	beq.n	80050ea <SEGGER_SYSVIEW_SendModule+0x102>
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4798      	blx	r3
    }
  }
}
 80050ea:	bf00      	nop
 80050ec:	3730      	adds	r7, #48	@ 0x30
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20014360 	.word	0x20014360
 80050f8:	20014368 	.word	0x20014368

080050fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005102:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00f      	beq.n	800512a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800510a:	4b0a      	ldr	r3, [pc, #40]	@ (8005134 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f2      	bne.n	8005110 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20014360 	.word	0x20014360

08005138 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800513e:	f3ef 8311 	mrs	r3, BASEPRI
 8005142:	f04f 0120 	mov.w	r1, #32
 8005146:	f381 8811 	msr	BASEPRI, r1
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	4817      	ldr	r0, [pc, #92]	@ (80051ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800514e:	f7fe fb75 	bl	800383c <_PreparePacket>
 8005152:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	4b14      	ldr	r3, [pc, #80]	@ (80051b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e00b      	b.n	800517c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1c59      	adds	r1, r3, #1
 800516c:	6179      	str	r1, [r7, #20]
 800516e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005180:	d8f0      	bhi.n	8005164 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	617a      	str	r2, [r7, #20]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005192:	221b      	movs	r2, #27
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	68b8      	ldr	r0, [r7, #8]
 8005198:	f7fe fc3c 	bl	8003a14 <_SendPacket>
  RECORD_END();
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f383 8811 	msr	BASEPRI, r3
}
 80051a2:	bf00      	nop
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20014368 	.word	0x20014368
 80051b0:	20014364 	.word	0x20014364

080051b4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80051b4:	b40f      	push	{r0, r1, r2, r3}
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	461a      	mov	r2, r3
 80051c6:	2100      	movs	r1, #0
 80051c8:	6938      	ldr	r0, [r7, #16]
 80051ca:	f7fe fea9 	bl	8003f20 <_VPrintTarget>
  va_end(ParamList);
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d8:	b004      	add	sp, #16
 80051da:	4770      	bx	lr

080051dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	@ 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051e4:	f3ef 8311 	mrs	r3, BASEPRI
 80051e8:	f04f 0120 	mov.w	r1, #32
 80051ec:	f381 8811 	msr	BASEPRI, r1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	4827      	ldr	r0, [pc, #156]	@ (8005290 <SEGGER_SYSVIEW_Warn+0xb4>)
 80051f4:	f7fe fb22 	bl	800383c <_PreparePacket>
 80051f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051fa:	2280      	movs	r2, #128	@ 0x80
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	f7fe faec 	bl	80037dc <_EncodeStr>
 8005204:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
 800520a:	2301      	movs	r3, #1
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	e00b      	b.n	8005228 <SEGGER_SYSVIEW_Warn+0x4c>
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	6279      	str	r1, [r7, #36]	@ 0x24
 800521a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	09db      	lsrs	r3, r3, #7
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2b7f      	cmp	r3, #127	@ 0x7f
 800522c:	d8f0      	bhi.n	8005210 <SEGGER_SYSVIEW_Warn+0x34>
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	627a      	str	r2, [r7, #36]	@ 0x24
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e00b      	b.n	8005260 <SEGGER_SYSVIEW_Warn+0x84>
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	61f9      	str	r1, [r7, #28]
 8005252:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	09db      	lsrs	r3, r3, #7
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b7f      	cmp	r3, #127	@ 0x7f
 8005264:	d8f0      	bhi.n	8005248 <SEGGER_SYSVIEW_Warn+0x6c>
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	61fa      	str	r2, [r7, #28]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005276:	221a      	movs	r2, #26
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f7fe fbca 	bl	8003a14 <_SendPacket>
  RECORD_END();
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f383 8811 	msr	BASEPRI, r3
}
 8005286:	bf00      	nop
 8005288:	3728      	adds	r7, #40	@ 0x28
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20014368 	.word	0x20014368

08005294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800529a:	f000 fc57 	bl	8005b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800529e:	f000 f899 	bl	80053d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052a2:	f000 f901 	bl	80054a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //SEGGER_UART_init(500000);

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80052a6:	4b3d      	ldr	r3, [pc, #244]	@ (800539c <main+0x108>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3c      	ldr	r2, [pc, #240]	@ (800539c <main+0x108>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80052b2:	f7fd fefb 	bl	80030ac <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80052b6:	f7ff fa63 	bl	8004780 <SEGGER_SYSVIEW_Start>

  // Button Task: Priority 3
  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 3, &btn_task_handle);
 80052ba:	4b39      	ldr	r3, [pc, #228]	@ (80053a0 <main+0x10c>)
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	2303      	movs	r3, #3
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	22c8      	movs	r2, #200	@ 0xc8
 80052c6:	4937      	ldr	r1, [pc, #220]	@ (80053a4 <main+0x110>)
 80052c8:	4837      	ldr	r0, [pc, #220]	@ (80053a8 <main+0x114>)
 80052ca:	f7fb fd2f 	bl	8000d2c <xTaskCreate>
 80052ce:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d00b      	beq.n	80052ee <main+0x5a>
        __asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	613b      	str	r3, [r7, #16]
    }
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <main+0x56>

  // Green LED Task: Priority 3
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 80052ee:	4b2f      	ldr	r3, [pc, #188]	@ (80053ac <main+0x118>)
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	2303      	movs	r3, #3
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	22c8      	movs	r2, #200	@ 0xc8
 80052fa:	492d      	ldr	r1, [pc, #180]	@ (80053b0 <main+0x11c>)
 80052fc:	482d      	ldr	r0, [pc, #180]	@ (80053b4 <main+0x120>)
 80052fe:	f7fb fd15 	bl	8000d2c <xTaskCreate>
 8005302:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d00b      	beq.n	8005322 <main+0x8e>
        __asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	60fb      	str	r3, [r7, #12]
    }
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <main+0x8a>
  next_task_handle = ledg_task_handle;
 8005322:	4b22      	ldr	r3, [pc, #136]	@ (80053ac <main+0x118>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a24      	ldr	r2, [pc, #144]	@ (80053b8 <main+0x124>)
 8005328:	6013      	str	r3, [r2, #0]

  // Orange LED Task: Priority 3
  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 3, &ledo_task_handle);
 800532a:	4b24      	ldr	r3, [pc, #144]	@ (80053bc <main+0x128>)
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	2303      	movs	r3, #3
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2300      	movs	r3, #0
 8005334:	22c8      	movs	r2, #200	@ 0xc8
 8005336:	4922      	ldr	r1, [pc, #136]	@ (80053c0 <main+0x12c>)
 8005338:	4822      	ldr	r0, [pc, #136]	@ (80053c4 <main+0x130>)
 800533a:	f7fb fcf7 	bl	8000d2c <xTaskCreate>
 800533e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d00b      	beq.n	800535e <main+0xca>
        __asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	60bb      	str	r3, [r7, #8]
    }
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <main+0xc6>

  // Red LED Task: Priority 3
  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 3, &ledr_task_handle);
 800535e:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <main+0x134>)
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	2303      	movs	r3, #3
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	22c8      	movs	r2, #200	@ 0xc8
 800536a:	4918      	ldr	r1, [pc, #96]	@ (80053cc <main+0x138>)
 800536c:	4818      	ldr	r0, [pc, #96]	@ (80053d0 <main+0x13c>)
 800536e:	f7fb fcdd 	bl	8000d2c <xTaskCreate>
 8005372:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d00b      	beq.n	8005392 <main+0xfe>
        __asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
    }
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <main+0xfa>


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8005392:	f7fb ff3f 	bl	8001214 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <main+0x102>
 800539a:	bf00      	nop
 800539c:	e0001000 	.word	0xe0001000
 80053a0:	20014458 	.word	0x20014458
 80053a4:	0800719c 	.word	0x0800719c
 80053a8:	080058bd 	.word	0x080058bd
 80053ac:	2001444c 	.word	0x2001444c
 80053b0:	080071a8 	.word	0x080071a8
 80053b4:	08005765 	.word	0x08005765
 80053b8:	2001445c 	.word	0x2001445c
 80053bc:	20014450 	.word	0x20014450
 80053c0:	080071b8 	.word	0x080071b8
 80053c4:	080057d5 	.word	0x080057d5
 80053c8:	20014454 	.word	0x20014454
 80053cc:	080071c8 	.word	0x080071c8
 80053d0:	08005845 	.word	0x08005845

080053d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b094      	sub	sp, #80	@ 0x50
 80053d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053da:	f107 0320 	add.w	r3, r7, #32
 80053de:	2230      	movs	r2, #48	@ 0x30
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fe26 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053e8:	f107 030c 	add.w	r3, r7, #12
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	60da      	str	r2, [r3, #12]
 80053f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <SystemClock_Config+0xcc>)
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	4a27      	ldr	r2, [pc, #156]	@ (80054a0 <SystemClock_Config+0xcc>)
 8005402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005406:	6413      	str	r3, [r2, #64]	@ 0x40
 8005408:	4b25      	ldr	r3, [pc, #148]	@ (80054a0 <SystemClock_Config+0xcc>)
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005414:	2300      	movs	r3, #0
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	4b22      	ldr	r3, [pc, #136]	@ (80054a4 <SystemClock_Config+0xd0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a21      	ldr	r2, [pc, #132]	@ (80054a4 <SystemClock_Config+0xd0>)
 800541e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <SystemClock_Config+0xd0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800542c:	607b      	str	r3, [r7, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005430:	2302      	movs	r3, #2
 8005432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005434:	2301      	movs	r3, #1
 8005436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005438:	2310      	movs	r3, #16
 800543a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800543c:	2302      	movs	r3, #2
 800543e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005440:	2300      	movs	r3, #0
 8005442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005444:	2308      	movs	r3, #8
 8005446:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005448:	23a8      	movs	r3, #168	@ 0xa8
 800544a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800544c:	2302      	movs	r3, #2
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005450:	2307      	movs	r3, #7
 8005452:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005454:	f107 0320 	add.w	r3, r7, #32
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fe83 	bl	8006164 <HAL_RCC_OscConfig>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005464:	f000 fa64 	bl	8005930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005468:	230f      	movs	r3, #15
 800546a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800546c:	2302      	movs	r3, #2
 800546e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005474:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800547a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800547e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005480:	f107 030c 	add.w	r3, r7, #12
 8005484:	2105      	movs	r1, #5
 8005486:	4618      	mov	r0, r3
 8005488:	f001 f8e4 	bl	8006654 <HAL_RCC_ClockConfig>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005492:	f000 fa4d 	bl	8005930 <Error_Handler>
  }
}
 8005496:	bf00      	nop
 8005498:	3750      	adds	r7, #80	@ 0x50
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40007000 	.word	0x40007000

080054a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	@ 0x30
 80054ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ae:	f107 031c 	add.w	r3, r7, #28
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	60da      	str	r2, [r3, #12]
 80054bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	4ba2      	ldr	r3, [pc, #648]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c6:	4aa1      	ldr	r2, [pc, #644]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054c8:	f043 0310 	orr.w	r3, r3, #16
 80054cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ce:	4b9f      	ldr	r3, [pc, #636]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	4b9b      	ldr	r3, [pc, #620]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	4a9a      	ldr	r2, [pc, #616]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054e4:	f043 0304 	orr.w	r3, r3, #4
 80054e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ea:	4b98      	ldr	r3, [pc, #608]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	4b94      	ldr	r3, [pc, #592]	@ (800574c <MX_GPIO_Init+0x2a4>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	4a93      	ldr	r2, [pc, #588]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005504:	6313      	str	r3, [r2, #48]	@ 0x30
 8005506:	4b91      	ldr	r3, [pc, #580]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	4b8d      	ldr	r3, [pc, #564]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	4a8c      	ldr	r2, [pc, #560]	@ (800574c <MX_GPIO_Init+0x2a4>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6313      	str	r3, [r2, #48]	@ 0x30
 8005522:	4b8a      	ldr	r3, [pc, #552]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	4b86      	ldr	r3, [pc, #536]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	4a85      	ldr	r2, [pc, #532]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	6313      	str	r3, [r2, #48]	@ 0x30
 800553e:	4b83      	ldr	r3, [pc, #524]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	607b      	str	r3, [r7, #4]
 800554e:	4b7f      	ldr	r3, [pc, #508]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	4a7e      	ldr	r2, [pc, #504]	@ (800574c <MX_GPIO_Init+0x2a4>)
 8005554:	f043 0308 	orr.w	r3, r3, #8
 8005558:	6313      	str	r3, [r2, #48]	@ 0x30
 800555a:	4b7c      	ldr	r3, [pc, #496]	@ (800574c <MX_GPIO_Init+0x2a4>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005566:	2200      	movs	r2, #0
 8005568:	2108      	movs	r1, #8
 800556a:	4879      	ldr	r0, [pc, #484]	@ (8005750 <MX_GPIO_Init+0x2a8>)
 800556c:	f000 fdc6 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005570:	2201      	movs	r2, #1
 8005572:	2101      	movs	r1, #1
 8005574:	4877      	ldr	r0, [pc, #476]	@ (8005754 <MX_GPIO_Init+0x2ac>)
 8005576:	f000 fdc1 	bl	80060fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800557a:	2200      	movs	r2, #0
 800557c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8005580:	4875      	ldr	r0, [pc, #468]	@ (8005758 <MX_GPIO_Init+0x2b0>)
 8005582:	f000 fdbb 	bl	80060fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005586:	2308      	movs	r3, #8
 8005588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800558a:	2301      	movs	r3, #1
 800558c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005592:	2300      	movs	r3, #0
 8005594:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005596:	f107 031c 	add.w	r3, r7, #28
 800559a:	4619      	mov	r1, r3
 800559c:	486c      	ldr	r0, [pc, #432]	@ (8005750 <MX_GPIO_Init+0x2a8>)
 800559e:	f000 fbf9 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055a6:	2301      	movs	r3, #1
 80055a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ae:	2300      	movs	r3, #0
 80055b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80055b2:	f107 031c 	add.w	r3, r7, #28
 80055b6:	4619      	mov	r1, r3
 80055b8:	4866      	ldr	r0, [pc, #408]	@ (8005754 <MX_GPIO_Init+0x2ac>)
 80055ba:	f000 fbeb 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80055be:	2308      	movs	r3, #8
 80055c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ca:	2300      	movs	r3, #0
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055ce:	2305      	movs	r3, #5
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80055d2:	f107 031c 	add.w	r3, r7, #28
 80055d6:	4619      	mov	r1, r3
 80055d8:	485e      	ldr	r0, [pc, #376]	@ (8005754 <MX_GPIO_Init+0x2ac>)
 80055da:	f000 fbdb 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80055e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80055ec:	f107 031c 	add.w	r3, r7, #28
 80055f0:	4619      	mov	r1, r3
 80055f2:	485a      	ldr	r0, [pc, #360]	@ (800575c <MX_GPIO_Init+0x2b4>)
 80055f4:	f000 fbce 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80055f8:	2310      	movs	r3, #16
 80055fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fc:	2302      	movs	r3, #2
 80055fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005600:	2300      	movs	r3, #0
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005604:	2300      	movs	r3, #0
 8005606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005608:	2306      	movs	r3, #6
 800560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800560c:	f107 031c 	add.w	r3, r7, #28
 8005610:	4619      	mov	r1, r3
 8005612:	4852      	ldr	r0, [pc, #328]	@ (800575c <MX_GPIO_Init+0x2b4>)
 8005614:	f000 fbbe 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005618:	23e0      	movs	r3, #224	@ 0xe0
 800561a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561c:	2302      	movs	r3, #2
 800561e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005624:	2300      	movs	r3, #0
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005628:	2305      	movs	r3, #5
 800562a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800562c:	f107 031c 	add.w	r3, r7, #28
 8005630:	4619      	mov	r1, r3
 8005632:	484a      	ldr	r0, [pc, #296]	@ (800575c <MX_GPIO_Init+0x2b4>)
 8005634:	f000 fbae 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8005638:	2304      	movs	r3, #4
 800563a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800563c:	2300      	movs	r3, #0
 800563e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8005644:	f107 031c 	add.w	r3, r7, #28
 8005648:	4619      	mov	r1, r3
 800564a:	4845      	ldr	r0, [pc, #276]	@ (8005760 <MX_GPIO_Init+0x2b8>)
 800564c:	f000 fba2 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8005650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005656:	2302      	movs	r3, #2
 8005658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565e:	2300      	movs	r3, #0
 8005660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005662:	2305      	movs	r3, #5
 8005664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8005666:	f107 031c 	add.w	r3, r7, #28
 800566a:	4619      	mov	r1, r3
 800566c:	483c      	ldr	r0, [pc, #240]	@ (8005760 <MX_GPIO_Init+0x2b8>)
 800566e:	f000 fb91 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8005672:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8005676:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005678:	2301      	movs	r3, #1
 800567a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	2300      	movs	r3, #0
 8005682:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005684:	f107 031c 	add.w	r3, r7, #28
 8005688:	4619      	mov	r1, r3
 800568a:	4833      	ldr	r0, [pc, #204]	@ (8005758 <MX_GPIO_Init+0x2b0>)
 800568c:	f000 fb82 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005690:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8005694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005696:	2302      	movs	r3, #2
 8005698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569e:	2300      	movs	r3, #0
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056a2:	2306      	movs	r3, #6
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056a6:	f107 031c 	add.w	r3, r7, #28
 80056aa:	4619      	mov	r1, r3
 80056ac:	4829      	ldr	r0, [pc, #164]	@ (8005754 <MX_GPIO_Init+0x2ac>)
 80056ae:	f000 fb71 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80056b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056b8:	2300      	movs	r3, #0
 80056ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80056c0:	f107 031c 	add.w	r3, r7, #28
 80056c4:	4619      	mov	r1, r3
 80056c6:	4825      	ldr	r0, [pc, #148]	@ (800575c <MX_GPIO_Init+0x2b4>)
 80056c8:	f000 fb64 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80056cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80056d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d2:	2302      	movs	r3, #2
 80056d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056da:	2300      	movs	r3, #0
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80056de:	230a      	movs	r3, #10
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e2:	f107 031c 	add.w	r3, r7, #28
 80056e6:	4619      	mov	r1, r3
 80056e8:	481c      	ldr	r0, [pc, #112]	@ (800575c <MX_GPIO_Init+0x2b4>)
 80056ea:	f000 fb53 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80056ee:	2320      	movs	r3, #32
 80056f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80056fa:	f107 031c 	add.w	r3, r7, #28
 80056fe:	4619      	mov	r1, r3
 8005700:	4815      	ldr	r0, [pc, #84]	@ (8005758 <MX_GPIO_Init+0x2b0>)
 8005702:	f000 fb47 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005706:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800570a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800570c:	2312      	movs	r3, #18
 800570e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005710:	2301      	movs	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005714:	2300      	movs	r3, #0
 8005716:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005718:	2304      	movs	r3, #4
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571c:	f107 031c 	add.w	r3, r7, #28
 8005720:	4619      	mov	r1, r3
 8005722:	480f      	ldr	r0, [pc, #60]	@ (8005760 <MX_GPIO_Init+0x2b8>)
 8005724:	f000 fb36 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8005728:	2302      	movs	r3, #2
 800572a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800572c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8005730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8005736:	f107 031c 	add.w	r3, r7, #28
 800573a:	4619      	mov	r1, r3
 800573c:	4804      	ldr	r0, [pc, #16]	@ (8005750 <MX_GPIO_Init+0x2a8>)
 800573e:	f000 fb29 	bl	8005d94 <HAL_GPIO_Init>

}
 8005742:	bf00      	nop
 8005744:	3730      	adds	r7, #48	@ 0x30
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	40021000 	.word	0x40021000
 8005754:	40020800 	.word	0x40020800
 8005758:	40020c00 	.word	0x40020c00
 800575c:	40020000 	.word	0x40020000
 8005760:	40020400 	.word	0x40020400

08005764 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800576c:	4814      	ldr	r0, [pc, #80]	@ (80057c0 <led_green_handler+0x5c>)
 800576e:	f7ff fd21 	bl	80051b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8005772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005776:	4813      	ldr	r0, [pc, #76]	@ (80057c4 <led_green_handler+0x60>)
 8005778:	f000 fcd9 	bl	800612e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800577c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	2200      	movs	r2, #0
 8005786:	2100      	movs	r1, #0
 8005788:	2000      	movs	r0, #0
 800578a:	f7fc faff 	bl	8001d8c <xTaskGenericNotifyWait>
 800578e:	60f8      	str	r0, [r7, #12]

		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));
		if(status == pdTRUE){
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d1ea      	bne.n	800576c <led_green_handler+0x8>
			vTaskSuspendAll();
 8005796:	f7fb fd9f 	bl	80012d8 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 800579a:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <led_green_handler+0x64>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0b      	ldr	r2, [pc, #44]	@ (80057cc <led_green_handler+0x68>)
 80057a0:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80057a2:	f7fb fda7 	bl	80012f4 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD ,LED_GREEN_PIN,GPIO_PIN_SET);
 80057a6:	2201      	movs	r2, #1
 80057a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057ac:	4805      	ldr	r0, [pc, #20]	@ (80057c4 <led_green_handler+0x60>)
 80057ae:	f000 fca5 	bl	80060fc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 80057b2:	4807      	ldr	r0, [pc, #28]	@ (80057d0 <led_green_handler+0x6c>)
 80057b4:	f7ff fcfe 	bl	80051b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7fb fc41 	bl	8001040 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80057be:	e7d5      	b.n	800576c <led_green_handler+0x8>
 80057c0:	080071d8 	.word	0x080071d8
 80057c4:	40020c00 	.word	0x40020c00
 80057c8:	20014450 	.word	0x20014450
 80057cc:	2001445c 	.word	0x2001445c
 80057d0:	080071ec 	.word	0x080071ec

080057d4 <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af02      	add	r7, sp, #8
 80057da:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80057dc:	4814      	ldr	r0, [pc, #80]	@ (8005830 <led_orange_handler+0x5c>)
 80057de:	f7ff fce9 	bl	80051b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 80057e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057e6:	4813      	ldr	r0, [pc, #76]	@ (8005834 <led_orange_handler+0x60>)
 80057e8:	f000 fca1 	bl	800612e <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		//vTaskDelay(pdMS_TO_TICKS(800));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80057ec:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	2200      	movs	r2, #0
 80057f6:	2100      	movs	r1, #0
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7fc fac7 	bl	8001d8c <xTaskGenericNotifyWait>
 80057fe:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d1ea      	bne.n	80057dc <led_orange_handler+0x8>
			vTaskSuspendAll();
 8005806:	f7fb fd67 	bl	80012d8 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 800580a:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <led_orange_handler+0x64>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0b      	ldr	r2, [pc, #44]	@ (800583c <led_orange_handler+0x68>)
 8005810:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8005812:	f7fb fd6f 	bl	80012f4 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD,LED_ORANGE_PIN,GPIO_PIN_SET);
 8005816:	2201      	movs	r2, #1
 8005818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800581c:	4805      	ldr	r0, [pc, #20]	@ (8005834 <led_orange_handler+0x60>)
 800581e:	f000 fc6d 	bl	80060fc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8005822:	4807      	ldr	r0, [pc, #28]	@ (8005840 <led_orange_handler+0x6c>)
 8005824:	f7ff fcc6 	bl	80051b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8005828:	2000      	movs	r0, #0
 800582a:	f7fb fc09 	bl	8001040 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800582e:	e7d5      	b.n	80057dc <led_orange_handler+0x8>
 8005830:	08007204 	.word	0x08007204
 8005834:	40020c00 	.word	0x40020c00
 8005838:	20014454 	.word	0x20014454
 800583c:	2001445c 	.word	0x2001445c
 8005840:	08007218 	.word	0x08007218

08005844 <led_red_handler>:
	}

}

static void led_red_handler(void* parameters)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af02      	add	r7, sp, #8
 800584a:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 800584c:	4816      	ldr	r0, [pc, #88]	@ (80058a8 <led_red_handler+0x64>)
 800584e:	f7ff fcb1 	bl	80051b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8005852:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005856:	4815      	ldr	r0, [pc, #84]	@ (80058ac <led_red_handler+0x68>)
 8005858:	f000 fc69 	bl	800612e <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		//vTaskDelay(pdMS_TO_TICKS(400));
		//vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 800585c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2300      	movs	r3, #0
 8005864:	2200      	movs	r2, #0
 8005866:	2100      	movs	r1, #0
 8005868:	2000      	movs	r0, #0
 800586a:	f7fc fa8f 	bl	8001d8c <xTaskGenericNotifyWait>
 800586e:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d1ea      	bne.n	800584c <led_red_handler+0x8>
			vTaskSuspendAll();
 8005876:	f7fb fd2f 	bl	80012d8 <vTaskSuspendAll>
			next_task_handle = NULL;
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <led_red_handler+0x6c>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8005880:	f7fb fd38 	bl	80012f4 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD,LED_RED_PIN,GPIO_PIN_SET);
 8005884:	2201      	movs	r2, #1
 8005886:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800588a:	4808      	ldr	r0, [pc, #32]	@ (80058ac <led_red_handler+0x68>)
 800588c:	f000 fc36 	bl	80060fc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8005890:	4808      	ldr	r0, [pc, #32]	@ (80058b4 <led_red_handler+0x70>)
 8005892:	f7ff fc8f 	bl	80051b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8005896:	4b08      	ldr	r3, [pc, #32]	@ (80058b8 <led_red_handler+0x74>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fb fbd0 	bl	8001040 <vTaskDelete>
			vTaskDelete(NULL);
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7fb fbcd 	bl	8001040 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80058a6:	e7d1      	b.n	800584c <led_red_handler+0x8>
 80058a8:	08007230 	.word	0x08007230
 80058ac:	40020c00 	.word	0x40020c00
 80058b0:	2001445c 	.word	0x2001445c
 80058b4:	08007244 	.word	0x08007244
 80058b8:	20014458 	.word	0x20014458

080058bc <button_handler>:
	}

}

static void button_handler(void* parameters)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read =0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]

	while(1){
		btn_read = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80058cc:	2101      	movs	r1, #1
 80058ce:	480d      	ldr	r0, [pc, #52]	@ (8005904 <button_handler+0x48>)
 80058d0:	f000 fbfc 	bl	80060cc <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <button_handler+0x3a>
		{
			if(!prev_read)
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <button_handler+0x3a>
				xTaskNotify(next_task_handle,0,eNoAction);
 80058e4:	4b08      	ldr	r3, [pc, #32]	@ (8005908 <button_handler+0x4c>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	2300      	movs	r3, #0
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2300      	movs	r3, #0
 80058ee:	2200      	movs	r2, #0
 80058f0:	2100      	movs	r1, #0
 80058f2:	f7fc fad5 	bl	8001ea0 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80058fa:	200a      	movs	r0, #10
 80058fc:	f7fb fc50 	bl	80011a0 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8005900:	e7e4      	b.n	80058cc <button_handler+0x10>
 8005902:	bf00      	nop
 8005904:	40020000 	.word	0x40020000
 8005908:	2001445c 	.word	0x2001445c

0800590c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a04      	ldr	r2, [pc, #16]	@ (800592c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800591e:	f000 f937 	bl	8005b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40001000 	.word	0x40001000

08005930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	4b10      	ldr	r3, [pc, #64]	@ (800598c <HAL_MspInit+0x4c>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	4a0f      	ldr	r2, [pc, #60]	@ (800598c <HAL_MspInit+0x4c>)
 8005950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005954:	6453      	str	r3, [r2, #68]	@ 0x44
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <HAL_MspInit+0x4c>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_MspInit+0x4c>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	4a08      	ldr	r2, [pc, #32]	@ (800598c <HAL_MspInit+0x4c>)
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6413      	str	r3, [r2, #64]	@ 0x40
 8005972:	4b06      	ldr	r3, [pc, #24]	@ (800598c <HAL_MspInit+0x4c>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800597e:	f7fd f805 	bl	800298c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800

08005990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08e      	sub	sp, #56	@ 0x38
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	4b33      	ldr	r3, [pc, #204]	@ (8005a74 <HAL_InitTick+0xe4>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	4a32      	ldr	r2, [pc, #200]	@ (8005a74 <HAL_InitTick+0xe4>)
 80059aa:	f043 0310 	orr.w	r3, r3, #16
 80059ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80059b0:	4b30      	ldr	r3, [pc, #192]	@ (8005a74 <HAL_InitTick+0xe4>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059bc:	f107 0210 	add.w	r2, r7, #16
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f850 	bl	8006a6c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80059d6:	f001 f835 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 80059da:	6378      	str	r0, [r7, #52]	@ 0x34
 80059dc:	e004      	b.n	80059e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80059de:	f001 f831 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 80059e2:	4603      	mov	r3, r0
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ea:	4a23      	ldr	r2, [pc, #140]	@ (8005a78 <HAL_InitTick+0xe8>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	0c9b      	lsrs	r3, r3, #18
 80059f2:	3b01      	subs	r3, #1
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80059f6:	4b21      	ldr	r3, [pc, #132]	@ (8005a7c <HAL_InitTick+0xec>)
 80059f8:	4a21      	ldr	r2, [pc, #132]	@ (8005a80 <HAL_InitTick+0xf0>)
 80059fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80059fc:	4b1f      	ldr	r3, [pc, #124]	@ (8005a7c <HAL_InitTick+0xec>)
 80059fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005a04:	4a1d      	ldr	r2, [pc, #116]	@ (8005a7c <HAL_InitTick+0xec>)
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <HAL_InitTick+0xec>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a10:	4b1a      	ldr	r3, [pc, #104]	@ (8005a7c <HAL_InitTick+0xec>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a16:	4b19      	ldr	r3, [pc, #100]	@ (8005a7c <HAL_InitTick+0xec>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005a1c:	4817      	ldr	r0, [pc, #92]	@ (8005a7c <HAL_InitTick+0xec>)
 8005a1e:	f001 f857 	bl	8006ad0 <HAL_TIM_Base_Init>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11b      	bne.n	8005a68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005a30:	4812      	ldr	r0, [pc, #72]	@ (8005a7c <HAL_InitTick+0xec>)
 8005a32:	f001 f8a7 	bl	8006b84 <HAL_TIM_Base_Start_IT>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d111      	bne.n	8005a68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a44:	2036      	movs	r0, #54	@ 0x36
 8005a46:	f000 f997 	bl	8005d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b0f      	cmp	r3, #15
 8005a4e:	d808      	bhi.n	8005a62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005a50:	2200      	movs	r2, #0
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	2036      	movs	r0, #54	@ 0x36
 8005a56:	f000 f973 	bl	8005d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a84 <HAL_InitTick+0xf4>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e002      	b.n	8005a68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005a68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3738      	adds	r7, #56	@ 0x38
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40023800 	.word	0x40023800
 8005a78:	431bde83 	.word	0x431bde83
 8005a7c:	20014460 	.word	0x20014460
 8005a80:	40001000 	.word	0x40001000
 8005a84:	2000000c 	.word	0x2000000c

08005a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <NMI_Handler+0x4>

08005a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a94:	bf00      	nop
 8005a96:	e7fd      	b.n	8005a94 <HardFault_Handler+0x4>

08005a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <MemManage_Handler+0x4>

08005aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <BusFault_Handler+0x4>

08005aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <UsageFault_Handler+0x4>

08005ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005ac4:	4802      	ldr	r0, [pc, #8]	@ (8005ad0 <TIM6_DAC_IRQHandler+0x10>)
 8005ac6:	f001 f8cd 	bl	8006c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005aca:	bf00      	nop
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20014460 	.word	0x20014460

08005ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ad8:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <SystemInit+0x20>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	4a05      	ldr	r2, [pc, #20]	@ (8005af4 <SystemInit+0x20>)
 8005ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005afc:	f7ff ffea 	bl	8005ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b00:	480c      	ldr	r0, [pc, #48]	@ (8005b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b02:	490d      	ldr	r1, [pc, #52]	@ (8005b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b04:	4a0d      	ldr	r2, [pc, #52]	@ (8005b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b08:	e002      	b.n	8005b10 <LoopCopyDataInit>

08005b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b0e:	3304      	adds	r3, #4

08005b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b14:	d3f9      	bcc.n	8005b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b16:	4a0a      	ldr	r2, [pc, #40]	@ (8005b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b18:	4c0a      	ldr	r4, [pc, #40]	@ (8005b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b1c:	e001      	b.n	8005b22 <LoopFillZerobss>

08005b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b20:	3204      	adds	r2, #4

08005b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b24:	d3fb      	bcc.n	8005b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b26:	f001 fa8d 	bl	8007044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b2a:	f7ff fbb3 	bl	8005294 <main>
  bx  lr    
 8005b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b38:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8005b3c:	080072b8 	.word	0x080072b8
  ldr r2, =_sbss
 8005b40:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8005b44:	200144ac 	.word	0x200144ac

08005b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b48:	e7fe      	b.n	8005b48 <ADC_IRQHandler>
	...

08005b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b50:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <HAL_Init+0x40>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0d      	ldr	r2, [pc, #52]	@ (8005b8c <HAL_Init+0x40>)
 8005b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <HAL_Init+0x40>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	@ (8005b8c <HAL_Init+0x40>)
 8005b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b68:	4b08      	ldr	r3, [pc, #32]	@ (8005b8c <HAL_Init+0x40>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a07      	ldr	r2, [pc, #28]	@ (8005b8c <HAL_Init+0x40>)
 8005b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b74:	2003      	movs	r0, #3
 8005b76:	f000 f8d8 	bl	8005d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f7ff ff08 	bl	8005990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b80:	f7ff fede 	bl	8005940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023c00 	.word	0x40023c00

08005b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b94:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_IncTick+0x20>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <HAL_IncTick+0x24>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	4a04      	ldr	r2, [pc, #16]	@ (8005bb4 <HAL_IncTick+0x24>)
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000010 	.word	0x20000010
 8005bb4:	200144a8 	.word	0x200144a8

08005bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return uwTick;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	@ (8005bcc <HAL_GetTick+0x14>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	200144a8 	.word	0x200144a8

08005bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005be0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c14 <__NVIC_SetPriorityGrouping+0x44>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005bec:	4013      	ands	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c02:	4a04      	ldr	r2, [pc, #16]	@ (8005c14 <__NVIC_SetPriorityGrouping+0x44>)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	60d3      	str	r3, [r2, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c1c:	4b04      	ldr	r3, [pc, #16]	@ (8005c30 <__NVIC_GetPriorityGrouping+0x18>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	f003 0307 	and.w	r3, r3, #7
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	db0b      	blt.n	8005c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	f003 021f 	and.w	r2, r3, #31
 8005c4c:	4907      	ldr	r1, [pc, #28]	@ (8005c6c <__NVIC_EnableIRQ+0x38>)
 8005c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2001      	movs	r0, #1
 8005c56:	fa00 f202 	lsl.w	r2, r0, r2
 8005c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000e100 	.word	0xe000e100

08005c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	6039      	str	r1, [r7, #0]
 8005c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db0a      	blt.n	8005c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	490c      	ldr	r1, [pc, #48]	@ (8005cbc <__NVIC_SetPriority+0x4c>)
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	0112      	lsls	r2, r2, #4
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	440b      	add	r3, r1
 8005c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c98:	e00a      	b.n	8005cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	4908      	ldr	r1, [pc, #32]	@ (8005cc0 <__NVIC_SetPriority+0x50>)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	0112      	lsls	r2, r2, #4
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	440b      	add	r3, r1
 8005cae:	761a      	strb	r2, [r3, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	e000e100 	.word	0xe000e100
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b089      	sub	sp, #36	@ 0x24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f1c3 0307 	rsb	r3, r3, #7
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	bf28      	it	cs
 8005ce2:	2304      	movcs	r3, #4
 8005ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d902      	bls.n	8005cf4 <NVIC_EncodePriority+0x30>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3b03      	subs	r3, #3
 8005cf2:	e000      	b.n	8005cf6 <NVIC_EncodePriority+0x32>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43da      	mvns	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	401a      	ands	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	fa01 f303 	lsl.w	r3, r1, r3
 8005d16:	43d9      	mvns	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d1c:	4313      	orrs	r3, r2
         );
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3724      	adds	r7, #36	@ 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ff4c 	bl	8005bd0 <__NVIC_SetPriorityGrouping>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d52:	f7ff ff61 	bl	8005c18 <__NVIC_GetPriorityGrouping>
 8005d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f7ff ffb1 	bl	8005cc4 <NVIC_EncodePriority>
 8005d62:	4602      	mov	r2, r0
 8005d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff80 	bl	8005c70 <__NVIC_SetPriority>
}
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff ff54 	bl	8005c34 <__NVIC_EnableIRQ>
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	@ 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e16b      	b.n	8006088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f040 815a 	bne.w	8006082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d005      	beq.n	8005de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d130      	bne.n	8005e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	2203      	movs	r2, #3
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	43db      	mvns	r3, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 0201 	and.w	r2, r3, #1
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d017      	beq.n	8005e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	2203      	movs	r2, #3
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d123      	bne.n	8005ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3208      	adds	r2, #8
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	220f      	movs	r2, #15
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	08da      	lsrs	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3208      	adds	r2, #8
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0203 	and.w	r2, r3, #3
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80b4 	beq.w	8006082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b60      	ldr	r3, [pc, #384]	@ (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	4a5f      	ldr	r2, [pc, #380]	@ (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f36:	4a5b      	ldr	r2, [pc, #364]	@ (80060a4 <HAL_GPIO_Init+0x310>)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a52      	ldr	r2, [pc, #328]	@ (80060a8 <HAL_GPIO_Init+0x314>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02b      	beq.n	8005fba <HAL_GPIO_Init+0x226>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a51      	ldr	r2, [pc, #324]	@ (80060ac <HAL_GPIO_Init+0x318>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d025      	beq.n	8005fb6 <HAL_GPIO_Init+0x222>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a50      	ldr	r2, [pc, #320]	@ (80060b0 <HAL_GPIO_Init+0x31c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01f      	beq.n	8005fb2 <HAL_GPIO_Init+0x21e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a4f      	ldr	r2, [pc, #316]	@ (80060b4 <HAL_GPIO_Init+0x320>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d019      	beq.n	8005fae <HAL_GPIO_Init+0x21a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80060b8 <HAL_GPIO_Init+0x324>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_GPIO_Init+0x216>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a4d      	ldr	r2, [pc, #308]	@ (80060bc <HAL_GPIO_Init+0x328>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00d      	beq.n	8005fa6 <HAL_GPIO_Init+0x212>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80060c0 <HAL_GPIO_Init+0x32c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <HAL_GPIO_Init+0x20e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a4b      	ldr	r2, [pc, #300]	@ (80060c4 <HAL_GPIO_Init+0x330>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_GPIO_Init+0x20a>
 8005f9a:	2307      	movs	r3, #7
 8005f9c:	e00e      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	e00c      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fa2:	2306      	movs	r3, #6
 8005fa4:	e00a      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fa6:	2305      	movs	r3, #5
 8005fa8:	e008      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005faa:	2304      	movs	r3, #4
 8005fac:	e006      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e004      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e002      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	f002 0203 	and.w	r2, r2, #3
 8005fc2:	0092      	lsls	r2, r2, #2
 8005fc4:	4093      	lsls	r3, r2
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fcc:	4935      	ldr	r1, [pc, #212]	@ (80060a4 <HAL_GPIO_Init+0x310>)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fda:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ffe:	4a32      	ldr	r2, [pc, #200]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006004:	4b30      	ldr	r3, [pc, #192]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006028:	4a27      	ldr	r2, [pc, #156]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800602e:	4b26      	ldr	r3, [pc, #152]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006052:	4a1d      	ldr	r2, [pc, #116]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006058:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	43db      	mvns	r3, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4013      	ands	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800607c:	4a12      	ldr	r2, [pc, #72]	@ (80060c8 <HAL_GPIO_Init+0x334>)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	f67f ae90 	bls.w	8005db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	3724      	adds	r7, #36	@ 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40013800 	.word	0x40013800
 80060a8:	40020000 	.word	0x40020000
 80060ac:	40020400 	.word	0x40020400
 80060b0:	40020800 	.word	0x40020800
 80060b4:	40020c00 	.word	0x40020c00
 80060b8:	40021000 	.word	0x40021000
 80060bc:	40021400 	.word	0x40021400
 80060c0:	40021800 	.word	0x40021800
 80060c4:	40021c00 	.word	0x40021c00
 80060c8:	40013c00 	.word	0x40013c00

080060cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	887b      	ldrh	r3, [r7, #2]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	e001      	b.n	80060ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
 8006108:	4613      	mov	r3, r2
 800610a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800610c:	787b      	ldrb	r3, [r7, #1]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006112:	887a      	ldrh	r2, [r7, #2]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006118:	e003      	b.n	8006122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800611a:	887b      	ldrh	r3, [r7, #2]
 800611c:	041a      	lsls	r2, r3, #16
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	619a      	str	r2, [r3, #24]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4013      	ands	r3, r2
 8006146:	041a      	lsls	r2, r3, #16
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	43d9      	mvns	r1, r3
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	400b      	ands	r3, r1
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	619a      	str	r2, [r3, #24]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e267      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d075      	beq.n	800626e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006182:	4b88      	ldr	r3, [pc, #544]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b04      	cmp	r3, #4
 800618c:	d00c      	beq.n	80061a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800618e:	4b85      	ldr	r3, [pc, #532]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006196:	2b08      	cmp	r3, #8
 8006198:	d112      	bne.n	80061c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619a:	4b82      	ldr	r3, [pc, #520]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061a6:	d10b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	4b7e      	ldr	r3, [pc, #504]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05b      	beq.n	800626c <HAL_RCC_OscConfig+0x108>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d157      	bne.n	800626c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e242      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c8:	d106      	bne.n	80061d8 <HAL_RCC_OscConfig+0x74>
 80061ca:	4b76      	ldr	r3, [pc, #472]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a75      	ldr	r2, [pc, #468]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e01d      	b.n	8006214 <HAL_RCC_OscConfig+0xb0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x98>
 80061e2:	4b70      	ldr	r3, [pc, #448]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6f      	ldr	r2, [pc, #444]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b6d      	ldr	r3, [pc, #436]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a6c      	ldr	r2, [pc, #432]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0xb0>
 80061fc:	4b69      	ldr	r3, [pc, #420]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a68      	ldr	r2, [pc, #416]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b66      	ldr	r3, [pc, #408]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a65      	ldr	r2, [pc, #404]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 800620e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d013      	beq.n	8006244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7ff fccc 	bl	8005bb8 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006224:	f7ff fcc8 	bl	8005bb8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	@ 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e207      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b5b      	ldr	r3, [pc, #364]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0xc0>
 8006242:	e014      	b.n	800626e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7ff fcb8 	bl	8005bb8 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800624c:	f7ff fcb4 	bl	8005bb8 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	@ 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1f3      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625e:	4b51      	ldr	r3, [pc, #324]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0xe8>
 800626a:	e000      	b.n	800626e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d063      	beq.n	8006342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800627a:	4b4a      	ldr	r3, [pc, #296]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006286:	4b47      	ldr	r3, [pc, #284]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800628e:	2b08      	cmp	r3, #8
 8006290:	d11c      	bne.n	80062cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006292:	4b44      	ldr	r3, [pc, #272]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d116      	bne.n	80062cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629e:	4b41      	ldr	r3, [pc, #260]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_RCC_OscConfig+0x152>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e1c7      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b6:	4b3b      	ldr	r3, [pc, #236]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4937      	ldr	r1, [pc, #220]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	e03a      	b.n	8006342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d4:	4b34      	ldr	r3, [pc, #208]	@ (80063a8 <HAL_RCC_OscConfig+0x244>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062da:	f7ff fc6d 	bl	8005bb8 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e2:	f7ff fc69 	bl	8005bb8 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1a8      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f4:	4b2b      	ldr	r3, [pc, #172]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006300:	4b28      	ldr	r3, [pc, #160]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4925      	ldr	r1, [pc, #148]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]
 8006314:	e015      	b.n	8006342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b24      	ldr	r3, [pc, #144]	@ (80063a8 <HAL_RCC_OscConfig+0x244>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7ff fc4c 	bl	8005bb8 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006324:	f7ff fc48 	bl	8005bb8 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e187      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006336:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d036      	beq.n	80063bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <HAL_RCC_OscConfig+0x248>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7ff fc2c 	bl	8005bb8 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006364:	f7ff fc28 	bl	8005bb8 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e167      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006376:	4b0b      	ldr	r3, [pc, #44]	@ (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x200>
 8006382:	e01b      	b.n	80063bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006384:	4b09      	ldr	r3, [pc, #36]	@ (80063ac <HAL_RCC_OscConfig+0x248>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638a:	f7ff fc15 	bl	8005bb8 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	e00e      	b.n	80063b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006392:	f7ff fc11 	bl	8005bb8 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d907      	bls.n	80063b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e150      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
 80063a4:	40023800 	.word	0x40023800
 80063a8:	42470000 	.word	0x42470000
 80063ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b0:	4b88      	ldr	r3, [pc, #544]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ea      	bne.n	8006392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8097 	beq.w	80064f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ce:	4b81      	ldr	r3, [pc, #516]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	4b7d      	ldr	r3, [pc, #500]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e2:	4a7c      	ldr	r2, [pc, #496]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80063ea:	4b7a      	ldr	r3, [pc, #488]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fa:	4b77      	ldr	r3, [pc, #476]	@ (80065d8 <HAL_RCC_OscConfig+0x474>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d118      	bne.n	8006438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006406:	4b74      	ldr	r3, [pc, #464]	@ (80065d8 <HAL_RCC_OscConfig+0x474>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a73      	ldr	r2, [pc, #460]	@ (80065d8 <HAL_RCC_OscConfig+0x474>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006412:	f7ff fbd1 	bl	8005bb8 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641a:	f7ff fbcd 	bl	8005bb8 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e10c      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642c:	4b6a      	ldr	r3, [pc, #424]	@ (80065d8 <HAL_RCC_OscConfig+0x474>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f0      	beq.n	800641a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d106      	bne.n	800644e <HAL_RCC_OscConfig+0x2ea>
 8006440:	4b64      	ldr	r3, [pc, #400]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006444:	4a63      	ldr	r2, [pc, #396]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	@ 0x70
 800644c:	e01c      	b.n	8006488 <HAL_RCC_OscConfig+0x324>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x30c>
 8006456:	4b5f      	ldr	r3, [pc, #380]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645a:	4a5e      	ldr	r2, [pc, #376]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 800645c:	f043 0304 	orr.w	r3, r3, #4
 8006460:	6713      	str	r3, [r2, #112]	@ 0x70
 8006462:	4b5c      	ldr	r3, [pc, #368]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006466:	4a5b      	ldr	r2, [pc, #364]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	6713      	str	r3, [r2, #112]	@ 0x70
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0x324>
 8006470:	4b58      	ldr	r3, [pc, #352]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006474:	4a57      	ldr	r2, [pc, #348]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	6713      	str	r3, [r2, #112]	@ 0x70
 800647c:	4b55      	ldr	r3, [pc, #340]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006480:	4a54      	ldr	r2, [pc, #336]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006482:	f023 0304 	bic.w	r3, r3, #4
 8006486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d015      	beq.n	80064bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006490:	f7ff fb92 	bl	8005bb8 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006496:	e00a      	b.n	80064ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006498:	f7ff fb8e 	bl	8005bb8 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e0cb      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ae:	4b49      	ldr	r3, [pc, #292]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0ee      	beq.n	8006498 <HAL_RCC_OscConfig+0x334>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064bc:	f7ff fb7c 	bl	8005bb8 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c2:	e00a      	b.n	80064da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c4:	f7ff fb78 	bl	8005bb8 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0b5      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064da:	4b3e      	ldr	r3, [pc, #248]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ee      	bne.n	80064c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d105      	bne.n	80064f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ec:	4b39      	ldr	r3, [pc, #228]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	4a38      	ldr	r2, [pc, #224]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80a1 	beq.w	8006644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006502:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b08      	cmp	r3, #8
 800650c:	d05c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d141      	bne.n	800659a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006516:	4b31      	ldr	r3, [pc, #196]	@ (80065dc <HAL_RCC_OscConfig+0x478>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651c:	f7ff fb4c 	bl	8005bb8 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006524:	f7ff fb48 	bl	8005bb8 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e087      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006536:	4b27      	ldr	r3, [pc, #156]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	491b      	ldr	r1, [pc, #108]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006568:	4313      	orrs	r3, r2
 800656a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800656c:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <HAL_RCC_OscConfig+0x478>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006572:	f7ff fb21 	bl	8005bb8 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657a:	f7ff fb1d 	bl	8005bb8 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e05c      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658c:	4b11      	ldr	r3, [pc, #68]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x416>
 8006598:	e054      	b.n	8006644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659a:	4b10      	ldr	r3, [pc, #64]	@ (80065dc <HAL_RCC_OscConfig+0x478>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7ff fb0a 	bl	8005bb8 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a8:	f7ff fb06 	bl	8005bb8 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e045      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ba:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <HAL_RCC_OscConfig+0x470>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x444>
 80065c6:	e03d      	b.n	8006644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e038      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40007000 	.word	0x40007000
 80065dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <HAL_RCC_OscConfig+0x4ec>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d028      	beq.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d121      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d11a      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006618:	4293      	cmp	r3, r2
 800661a:	d111      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	3b01      	subs	r3, #1
 800662a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d107      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800

08006654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0cc      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006668:	4b68      	ldr	r3, [pc, #416]	@ (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d90c      	bls.n	8006690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b65      	ldr	r3, [pc, #404]	@ (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b63      	ldr	r3, [pc, #396]	@ (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0b8      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d020      	beq.n	80066de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a8:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	4a58      	ldr	r2, [pc, #352]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c0:	4b53      	ldr	r3, [pc, #332]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a52      	ldr	r2, [pc, #328]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066cc:	4b50      	ldr	r3, [pc, #320]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	494d      	ldr	r1, [pc, #308]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d044      	beq.n	8006774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f2:	4b47      	ldr	r3, [pc, #284]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d119      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e07f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d003      	beq.n	8006712 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800670e:	2b03      	cmp	r3, #3
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b3f      	ldr	r3, [pc, #252]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	4b3b      	ldr	r3, [pc, #236]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e067      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006732:	4b37      	ldr	r3, [pc, #220]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4934      	ldr	r1, [pc, #208]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	4313      	orrs	r3, r2
 8006742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006744:	f7ff fa38 	bl	8005bb8 <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	e00a      	b.n	8006762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674c:	f7ff fa34 	bl	8005bb8 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e04f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	4b2b      	ldr	r3, [pc, #172]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 020c 	and.w	r2, r3, #12
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	429a      	cmp	r2, r3
 8006772:	d1eb      	bne.n	800674c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006774:	4b25      	ldr	r3, [pc, #148]	@ (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d20c      	bcs.n	800679c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b22      	ldr	r3, [pc, #136]	@ (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b20      	ldr	r3, [pc, #128]	@ (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e032      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a8:	4b19      	ldr	r3, [pc, #100]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4916      	ldr	r1, [pc, #88]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067c6:	4b12      	ldr	r3, [pc, #72]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	490e      	ldr	r1, [pc, #56]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067da:	f000 f821 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	490a      	ldr	r1, [pc, #40]	@ (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 80067ec:	5ccb      	ldrb	r3, [r1, r3]
 80067ee:	fa22 f303 	lsr.w	r3, r2, r3
 80067f2:	4a09      	ldr	r2, [pc, #36]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80067f6:	4b09      	ldr	r3, [pc, #36]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff f8c8 	bl	8005990 <HAL_InitTick>

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40023c00 	.word	0x40023c00
 8006810:	40023800 	.word	0x40023800
 8006814:	08007290 	.word	0x08007290
 8006818:	20000008 	.word	0x20000008
 800681c:	2000000c 	.word	0x2000000c

08006820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006824:	b094      	sub	sp, #80	@ 0x50
 8006826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006838:	4b79      	ldr	r3, [pc, #484]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b08      	cmp	r3, #8
 8006842:	d00d      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x40>
 8006844:	2b08      	cmp	r3, #8
 8006846:	f200 80e1 	bhi.w	8006a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x34>
 800684e:	2b04      	cmp	r3, #4
 8006850:	d003      	beq.n	800685a <HAL_RCC_GetSysClockFreq+0x3a>
 8006852:	e0db      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006854:	4b73      	ldr	r3, [pc, #460]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006858:	e0db      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800685a:	4b73      	ldr	r3, [pc, #460]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800685c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800685e:	e0d8      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006860:	4b6f      	ldr	r3, [pc, #444]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006868:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686a:	4b6d      	ldr	r3, [pc, #436]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d063      	beq.n	800693e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006876:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	2200      	movs	r2, #0
 800687e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006880:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
 800688e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f04f 0000 	mov.w	r0, #0
 800689a:	f04f 0100 	mov.w	r1, #0
 800689e:	0159      	lsls	r1, r3, #5
 80068a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a4:	0150      	lsls	r0, r2, #5
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4621      	mov	r1, r4
 80068ac:	1a51      	subs	r1, r2, r1
 80068ae:	6139      	str	r1, [r7, #16]
 80068b0:	4629      	mov	r1, r5
 80068b2:	eb63 0301 	sbc.w	r3, r3, r1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c4:	4659      	mov	r1, fp
 80068c6:	018b      	lsls	r3, r1, #6
 80068c8:	4651      	mov	r1, sl
 80068ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ce:	4651      	mov	r1, sl
 80068d0:	018a      	lsls	r2, r1, #6
 80068d2:	4651      	mov	r1, sl
 80068d4:	ebb2 0801 	subs.w	r8, r2, r1
 80068d8:	4659      	mov	r1, fp
 80068da:	eb63 0901 	sbc.w	r9, r3, r1
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f2:	4690      	mov	r8, r2
 80068f4:	4699      	mov	r9, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	eb18 0303 	adds.w	r3, r8, r3
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	462b      	mov	r3, r5
 8006900:	eb49 0303 	adc.w	r3, r9, r3
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006912:	4629      	mov	r1, r5
 8006914:	024b      	lsls	r3, r1, #9
 8006916:	4621      	mov	r1, r4
 8006918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800691c:	4621      	mov	r1, r4
 800691e:	024a      	lsls	r2, r1, #9
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006926:	2200      	movs	r2, #0
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800692c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006930:	f7f9 fc98 	bl	8000264 <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4613      	mov	r3, r2
 800693a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693c:	e058      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693e:	4b38      	ldr	r3, [pc, #224]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	099b      	lsrs	r3, r3, #6
 8006944:	2200      	movs	r2, #0
 8006946:	4618      	mov	r0, r3
 8006948:	4611      	mov	r1, r2
 800694a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	2300      	movs	r3, #0
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
 8006954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	f04f 0000 	mov.w	r0, #0
 8006960:	f04f 0100 	mov.w	r1, #0
 8006964:	0159      	lsls	r1, r3, #5
 8006966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800696a:	0150      	lsls	r0, r2, #5
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4641      	mov	r1, r8
 8006972:	ebb2 0a01 	subs.w	sl, r2, r1
 8006976:	4649      	mov	r1, r9
 8006978:	eb63 0b01 	sbc.w	fp, r3, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800698c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006990:	ebb2 040a 	subs.w	r4, r2, sl
 8006994:	eb63 050b 	sbc.w	r5, r3, fp
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	00eb      	lsls	r3, r5, #3
 80069a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069a6:	00e2      	lsls	r2, r4, #3
 80069a8:	4614      	mov	r4, r2
 80069aa:	461d      	mov	r5, r3
 80069ac:	4643      	mov	r3, r8
 80069ae:	18e3      	adds	r3, r4, r3
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	464b      	mov	r3, r9
 80069b4:	eb45 0303 	adc.w	r3, r5, r3
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069c6:	4629      	mov	r1, r5
 80069c8:	028b      	lsls	r3, r1, #10
 80069ca:	4621      	mov	r1, r4
 80069cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069d0:	4621      	mov	r1, r4
 80069d2:	028a      	lsls	r2, r1, #10
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069da:	2200      	movs	r2, #0
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	61fa      	str	r2, [r7, #28]
 80069e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e4:	f7f9 fc3e 	bl	8000264 <__aeabi_uldivmod>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4613      	mov	r3, r2
 80069ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	3301      	adds	r3, #1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a0c:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3750      	adds	r7, #80	@ 0x50
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a1e:	bf00      	nop
 8006a20:	40023800 	.word	0x40023800
 8006a24:	00f42400 	.word	0x00f42400
 8006a28:	007a1200 	.word	0x007a1200

08006a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a30:	4b03      	ldr	r3, [pc, #12]	@ (8006a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a32:	681b      	ldr	r3, [r3, #0]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000008 	.word	0x20000008

08006a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a48:	f7ff fff0 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0a9b      	lsrs	r3, r3, #10
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	4903      	ldr	r1, [pc, #12]	@ (8006a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40023800 	.word	0x40023800
 8006a68:	080072a0 	.word	0x080072a0

08006a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	220f      	movs	r2, #15
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a7c:	4b12      	ldr	r3, [pc, #72]	@ (8006ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 0203 	and.w	r2, r3, #3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a88:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a94:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006aa0:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	08db      	lsrs	r3, r3, #3
 8006aa6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006aae:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <HAL_RCC_GetClockConfig+0x60>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0207 	and.w	r2, r3, #7
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	40023c00 	.word	0x40023c00

08006ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e041      	b.n	8006b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f839 	bl	8006b6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f000 f9c0 	bl	8006e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d001      	beq.n	8006b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e04e      	b.n	8006c3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	@ (8006c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d022      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc6:	d01d      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d018      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d009      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a19      	ldr	r2, [pc, #100]	@ (8006c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x80>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a18      	ldr	r2, [pc, #96]	@ (8006c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d111      	bne.n	8006c28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b06      	cmp	r3, #6
 8006c14:	d010      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c26:	e007      	b.n	8006c38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40000400 	.word	0x40000400
 8006c50:	40000800 	.word	0x40000800
 8006c54:	40000c00 	.word	0x40000c00
 8006c58:	40010400 	.word	0x40010400
 8006c5c:	40014000 	.word	0x40014000
 8006c60:	40001800 	.word	0x40001800

08006c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d020      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01b      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0202 	mvn.w	r2, #2
 8006c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8d2 	bl	8006e58 <HAL_TIM_IC_CaptureCallback>
 8006cb4:	e005      	b.n	8006cc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f8c4 	bl	8006e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8d5 	bl	8006e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d020      	beq.n	8006d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01b      	beq.n	8006d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0204 	mvn.w	r2, #4
 8006ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8ac 	bl	8006e58 <HAL_TIM_IC_CaptureCallback>
 8006d00:	e005      	b.n	8006d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f89e 	bl	8006e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f8af 	bl	8006e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d020      	beq.n	8006d60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01b      	beq.n	8006d60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0208 	mvn.w	r2, #8
 8006d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f886 	bl	8006e58 <HAL_TIM_IC_CaptureCallback>
 8006d4c:	e005      	b.n	8006d5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f878 	bl	8006e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f889 	bl	8006e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d020      	beq.n	8006dac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d01b      	beq.n	8006dac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0210 	mvn.w	r2, #16
 8006d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2208      	movs	r2, #8
 8006d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f860 	bl	8006e58 <HAL_TIM_IC_CaptureCallback>
 8006d98:	e005      	b.n	8006da6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f852 	bl	8006e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f863 	bl	8006e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00c      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0201 	mvn.w	r2, #1
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fe fd9e 	bl	800590c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00c      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f906 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f834 	bl	8006e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0220 	mvn.w	r2, #32
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8d8 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a46      	ldr	r2, [pc, #280]	@ (8006fc0 <TIM_Base_SetConfig+0x12c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb2:	d00f      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a43      	ldr	r2, [pc, #268]	@ (8006fc4 <TIM_Base_SetConfig+0x130>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a42      	ldr	r2, [pc, #264]	@ (8006fc8 <TIM_Base_SetConfig+0x134>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d007      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a41      	ldr	r2, [pc, #260]	@ (8006fcc <TIM_Base_SetConfig+0x138>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0x40>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a40      	ldr	r2, [pc, #256]	@ (8006fd0 <TIM_Base_SetConfig+0x13c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d108      	bne.n	8006ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a35      	ldr	r2, [pc, #212]	@ (8006fc0 <TIM_Base_SetConfig+0x12c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d02b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef4:	d027      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a32      	ldr	r2, [pc, #200]	@ (8006fc4 <TIM_Base_SetConfig+0x130>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d023      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a31      	ldr	r2, [pc, #196]	@ (8006fc8 <TIM_Base_SetConfig+0x134>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01f      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a30      	ldr	r2, [pc, #192]	@ (8006fcc <TIM_Base_SetConfig+0x138>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2f      	ldr	r2, [pc, #188]	@ (8006fd0 <TIM_Base_SetConfig+0x13c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d017      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a2e      	ldr	r2, [pc, #184]	@ (8006fd4 <TIM_Base_SetConfig+0x140>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d013      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a2d      	ldr	r2, [pc, #180]	@ (8006fd8 <TIM_Base_SetConfig+0x144>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a2c      	ldr	r2, [pc, #176]	@ (8006fdc <TIM_Base_SetConfig+0x148>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a2b      	ldr	r2, [pc, #172]	@ (8006fe0 <TIM_Base_SetConfig+0x14c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe4 <TIM_Base_SetConfig+0x150>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_Base_SetConfig+0xb2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a29      	ldr	r2, [pc, #164]	@ (8006fe8 <TIM_Base_SetConfig+0x154>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d108      	bne.n	8006f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a10      	ldr	r2, [pc, #64]	@ (8006fc0 <TIM_Base_SetConfig+0x12c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_Base_SetConfig+0xf8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a12      	ldr	r2, [pc, #72]	@ (8006fd0 <TIM_Base_SetConfig+0x13c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d103      	bne.n	8006f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d105      	bne.n	8006fb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f023 0201 	bic.w	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	611a      	str	r2, [r3, #16]
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40014400 	.word	0x40014400
 8006fdc:	40014800 	.word	0x40014800
 8006fe0:	40001800 	.word	0x40001800
 8006fe4:	40001c00 	.word	0x40001c00
 8006fe8:	40002000 	.word	0x40002000

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <memcmp>:
 8007014:	b510      	push	{r4, lr}
 8007016:	3901      	subs	r1, #1
 8007018:	4402      	add	r2, r0
 800701a:	4290      	cmp	r0, r2
 800701c:	d101      	bne.n	8007022 <memcmp+0xe>
 800701e:	2000      	movs	r0, #0
 8007020:	e005      	b.n	800702e <memcmp+0x1a>
 8007022:	7803      	ldrb	r3, [r0, #0]
 8007024:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007028:	42a3      	cmp	r3, r4
 800702a:	d001      	beq.n	8007030 <memcmp+0x1c>
 800702c:	1b18      	subs	r0, r3, r4
 800702e:	bd10      	pop	{r4, pc}
 8007030:	3001      	adds	r0, #1
 8007032:	e7f2      	b.n	800701a <memcmp+0x6>

08007034 <memset>:
 8007034:	4402      	add	r2, r0
 8007036:	4603      	mov	r3, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <__libc_init_array>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	4d0d      	ldr	r5, [pc, #52]	@ (800707c <__libc_init_array+0x38>)
 8007048:	4c0d      	ldr	r4, [pc, #52]	@ (8007080 <__libc_init_array+0x3c>)
 800704a:	1b64      	subs	r4, r4, r5
 800704c:	10a4      	asrs	r4, r4, #2
 800704e:	2600      	movs	r6, #0
 8007050:	42a6      	cmp	r6, r4
 8007052:	d109      	bne.n	8007068 <__libc_init_array+0x24>
 8007054:	4d0b      	ldr	r5, [pc, #44]	@ (8007084 <__libc_init_array+0x40>)
 8007056:	4c0c      	ldr	r4, [pc, #48]	@ (8007088 <__libc_init_array+0x44>)
 8007058:	f000 f826 	bl	80070a8 <_init>
 800705c:	1b64      	subs	r4, r4, r5
 800705e:	10a4      	asrs	r4, r4, #2
 8007060:	2600      	movs	r6, #0
 8007062:	42a6      	cmp	r6, r4
 8007064:	d105      	bne.n	8007072 <__libc_init_array+0x2e>
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	f855 3b04 	ldr.w	r3, [r5], #4
 800706c:	4798      	blx	r3
 800706e:	3601      	adds	r6, #1
 8007070:	e7ee      	b.n	8007050 <__libc_init_array+0xc>
 8007072:	f855 3b04 	ldr.w	r3, [r5], #4
 8007076:	4798      	blx	r3
 8007078:	3601      	adds	r6, #1
 800707a:	e7f2      	b.n	8007062 <__libc_init_array+0x1e>
 800707c:	080072b0 	.word	0x080072b0
 8007080:	080072b0 	.word	0x080072b0
 8007084:	080072b0 	.word	0x080072b0
 8007088:	080072b4 	.word	0x080072b4

0800708c <memcpy>:
 800708c:	440a      	add	r2, r1
 800708e:	4291      	cmp	r1, r2
 8007090:	f100 33ff 	add.w	r3, r0, #4294967295
 8007094:	d100      	bne.n	8007098 <memcpy+0xc>
 8007096:	4770      	bx	lr
 8007098:	b510      	push	{r4, lr}
 800709a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800709e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a2:	4291      	cmp	r1, r2
 80070a4:	d1f9      	bne.n	800709a <memcpy+0xe>
 80070a6:	bd10      	pop	{r4, pc}

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
